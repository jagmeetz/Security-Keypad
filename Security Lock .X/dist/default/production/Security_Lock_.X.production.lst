

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Mon Jan 18 16:47:22 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    22                           	dabs	1,0x7E,2
    23  0000                     
    24                           ; Version 2.20
    25                           ; Generated 12/02/2020 GMT
    26                           ; 
    27                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F877A Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     	;# 
    59  0001                     	;# 
    60  0002                     	;# 
    61  0003                     	;# 
    62  0004                     	;# 
    63  0005                     	;# 
    64  0006                     	;# 
    65  0007                     	;# 
    66  0008                     	;# 
    67  0009                     	;# 
    68  000A                     	;# 
    69  000B                     	;# 
    70  000C                     	;# 
    71  000D                     	;# 
    72  000E                     	;# 
    73  000E                     	;# 
    74  000F                     	;# 
    75  0010                     	;# 
    76  0011                     	;# 
    77  0012                     	;# 
    78  0013                     	;# 
    79  0014                     	;# 
    80  0015                     	;# 
    81  0015                     	;# 
    82  0016                     	;# 
    83  0017                     	;# 
    84  0018                     	;# 
    85  0019                     	;# 
    86  001A                     	;# 
    87  001B                     	;# 
    88  001B                     	;# 
    89  001C                     	;# 
    90  001D                     	;# 
    91  001E                     	;# 
    92  001F                     	;# 
    93  0081                     	;# 
    94  0085                     	;# 
    95  0086                     	;# 
    96  0087                     	;# 
    97  0088                     	;# 
    98  0089                     	;# 
    99  008C                     	;# 
   100  008D                     	;# 
   101  008E                     	;# 
   102  0091                     	;# 
   103  0092                     	;# 
   104  0093                     	;# 
   105  0094                     	;# 
   106  0098                     	;# 
   107  0099                     	;# 
   108  009C                     	;# 
   109  009D                     	;# 
   110  009E                     	;# 
   111  009F                     	;# 
   112  010C                     	;# 
   113  010D                     	;# 
   114  010E                     	;# 
   115  010F                     	;# 
   116  018C                     	;# 
   117  018D                     	;# 
   118  0000                     	;# 
   119  0001                     	;# 
   120  0002                     	;# 
   121  0003                     	;# 
   122  0004                     	;# 
   123  0005                     	;# 
   124  0006                     	;# 
   125  0007                     	;# 
   126  0008                     	;# 
   127  0009                     	;# 
   128  000A                     	;# 
   129  000B                     	;# 
   130  000C                     	;# 
   131  000D                     	;# 
   132  000E                     	;# 
   133  000E                     	;# 
   134  000F                     	;# 
   135  0010                     	;# 
   136  0011                     	;# 
   137  0012                     	;# 
   138  0013                     	;# 
   139  0014                     	;# 
   140  0015                     	;# 
   141  0015                     	;# 
   142  0016                     	;# 
   143  0017                     	;# 
   144  0018                     	;# 
   145  0019                     	;# 
   146  001A                     	;# 
   147  001B                     	;# 
   148  001B                     	;# 
   149  001C                     	;# 
   150  001D                     	;# 
   151  001E                     	;# 
   152  001F                     	;# 
   153  0081                     	;# 
   154  0085                     	;# 
   155  0086                     	;# 
   156  0087                     	;# 
   157  0088                     	;# 
   158  0089                     	;# 
   159  008C                     	;# 
   160  008D                     	;# 
   161  008E                     	;# 
   162  0091                     	;# 
   163  0092                     	;# 
   164  0093                     	;# 
   165  0094                     	;# 
   166  0098                     	;# 
   167  0099                     	;# 
   168  009C                     	;# 
   169  009D                     	;# 
   170  009E                     	;# 
   171  009F                     	;# 
   172  010C                     	;# 
   173  010D                     	;# 
   174  010E                     	;# 
   175  010F                     	;# 
   176  018C                     	;# 
   177  018D                     	;# 
   178                           
   179                           	psect	idataBANK0
   180  03E2                     __pidataBANK0:
   181                           
   182                           ;initializer for _pass
   183  03E2  3401               	retlw	1
   184  03E3  3400               	retlw	0
   185  03E4  3402               	retlw	2
   186  03E5  3400               	retlw	0
   187  03E6  3403               	retlw	3
   188  03E7  3400               	retlw	0
   189  03E8  3404               	retlw	4
   190  03E9  3400               	retlw	0
   191  0006                     _PORTB	set	6
   192  0043                     _RD3	set	67
   193  0042                     _RD2	set	66
   194  0047                     _RD7	set	71
   195  0046                     _RD6	set	70
   196  0045                     _RD5	set	69
   197  0044                     _RD4	set	68
   198  003A                     _RC2	set	58
   199  0039                     _RC1	set	57
   200  0038                     _RC0	set	56
   201  003F                     _RC7	set	63
   202  003E                     _RC6	set	62
   203  003D                     _RC5	set	61
   204  003C                     _RC4	set	60
   205  0087                     _TRISC	set	135
   206  0086                     _TRISB	set	134
   207  0088                     _TRISD	set	136
   208                           
   209                           	psect	strings
   210  0003                     __pstrings:
   211  0003                     stringtab:
   212  0003                     __stringtab:
   213  0003                     stringcode:	
   214                           ;	String table - string pointers are 1 byte each
   215                           
   216  0003                     stringdir:
   217  0003  3000               	movlw	high stringdir
   218  0004  008A               	movwf	10
   219  0005  0804               	movf	4,w
   220  0006  0A84               	incf	4,f
   221  0007  0782               	addwf	2,f
   222  0008                     __stringbase:
   223  0008  3400               	retlw	0
   224  0009                     __end_of__stringtab:
   225  0009                     STR_1:
   226  0009  3449               	retlw	73	;'I'
   227  000A  346E               	retlw	110	;'n'
   228  000B  3470               	retlw	112	;'p'
   229  000C  3475               	retlw	117	;'u'
   230  000D  3474               	retlw	116	;'t'
   231  000E  3420               	retlw	32	;' '
   232  000F  3450               	retlw	80	;'P'
   233  0010  3461               	retlw	97	;'a'
   234  0011  3473               	retlw	115	;'s'
   235  0012  3473               	retlw	115	;'s'
   236  0013  3477               	retlw	119	;'w'
   237  0014  346F               	retlw	111	;'o'
   238  0015  3472               	retlw	114	;'r'
   239  0016  3464               	retlw	100	;'d'
   240  0017  3400               	retlw	0
   241  0018                     STR_5:
   242  0018  3449               	retlw	73	;'I'
   243  0019  346E               	retlw	110	;'n'
   244  001A  3463               	retlw	99	;'c'
   245  001B  346F               	retlw	111	;'o'
   246  001C  3472               	retlw	114	;'r'
   247  001D  3472               	retlw	114	;'r'
   248  001E  3465               	retlw	101	;'e'
   249  001F  3463               	retlw	99	;'c'
   250  0020  3474               	retlw	116	;'t'
   251  0021  3400               	retlw	0
   252  0022                     STR_4:
   253  0022  3443               	retlw	67	;'C'
   254  0023  346F               	retlw	111	;'o'
   255  0024  3472               	retlw	114	;'r'
   256  0025  3472               	retlw	114	;'r'
   257  0026  3465               	retlw	101	;'e'
   258  0027  3463               	retlw	99	;'c'
   259  0028  3474               	retlw	116	;'t'
   260  0029  3400               	retlw	0
   261  002A                     STR_3:
   262  002A  3420               	retlw	32	;' '
   263  002B  3400               	retlw	0
   264  002C                     STR_2:
   265  002C  342A               	retlw	42	;'*'
   266  002D  3400               	retlw	0
   267                           
   268                           	psect	cinit
   269  07E4                     start_initialization:	
   270                           ; #config settings
   271                           
   272  07E4                     __initialization:
   273                           
   274                           ; Initialize objects allocated to BANK0
   275  07E4  1383               	bcf	3,7	;select IRP bank0
   276  07E5  3032               	movlw	low (__pdataBANK0+8)
   277  07E6  00FD               	movwf	btemp+-1
   278  07E7  3003               	movlw	high __pidataBANK0
   279  07E8  00FE               	movwf	btemp
   280  07E9  30E2               	movlw	low __pidataBANK0
   281  07EA  00FF               	movwf	btemp+1
   282  07EB  302A               	movlw	low __pdataBANK0
   283  07EC  0084               	movwf	4
   284  07ED  120A  118A  23FB  120A  118A  	fcall	init_ram0
   285                           
   286                           ; Clear objects allocated to BANK0
   287  07F2  01A0               	clrf	__pbssBANK0& (0+127)
   288  07F3  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   289  07F4  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   290  07F5  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   291  07F6  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   292  07F7  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   293  07F8  01A6               	clrf	(__pbssBANK0+6)& (0+127)
   294  07F9  01A7               	clrf	(__pbssBANK0+7)& (0+127)
   295  07FA  01A8               	clrf	(__pbssBANK0+8)& (0+127)
   296  07FB  01A9               	clrf	(__pbssBANK0+9)& (0+127)
   297  07FC                     end_of_initialization:	
   298                           ;End of C runtime variable initialization code
   299                           
   300  07FC                     __end_of__initialization:
   301  07FC  0183               	clrf	3
   302  07FD  120A  118A  2E6B   	ljmp	_main	;jump to C main() function
   303                           
   304                           	psect	bssBANK0
   305  0020                     __pbssBANK0:
   306  0020                     _input:
   307  0020                     	ds	10
   308                           
   309                           	psect	dataBANK0
   310  002A                     __pdataBANK0:
   311  002A                     _pass:
   312  002A                     	ds	8
   313                           
   314                           	psect	inittext
   315  03F7                     init_fetch0:	
   316                           ;	Called with low address in FSR and high address in W
   317                           
   318  03F7  087E               	movf	btemp,w
   319  03F8  008A               	movwf	10
   320  03F9  087F               	movf	btemp+1,w
   321  03FA  0082               	movwf	2
   322  03FB                     init_ram0:	
   323                           ;Called with:
   324                           ;	high address of idata address in btemp 
   325                           ;	low address of idata address in btemp+1 
   326                           ;	low address of data in FSR
   327                           ;	high address + 1 of data in btemp-1
   328                           
   329  03FB  120A  118A  23F7  120A  118A  	fcall	init_fetch0
   330  0400  0080               	movwf	0
   331  0401  0A84               	incf	4,f
   332  0402  0804               	movf	4,w
   333  0403  067D               	xorwf	btemp+-1,w
   334  0404  1903               	btfsc	3,2
   335  0405  3400               	retlw	0
   336  0406  0AFF               	incf	btemp+1,f
   337  0407  1903               	btfsc	3,2
   338  0408  0AFE               	incf	btemp,f
   339  0409  2BFB               	goto	init_ram0
   340                           
   341                           	psect	cstackCOMMON
   342  0070                     __pcstackCOMMON:
   343  0070                     ?_get_colm:
   344  0070                     ?_lcd_setbit:	
   345                           ; 1 bytes @ 0x0
   346                           
   347  0070                     ??_lcd_setbit:	
   348                           ; 1 bytes @ 0x0
   349                           
   350  0070                     ?_lcd_cmd:	
   351                           ; 1 bytes @ 0x0
   352                           
   353  0070                     ?_lcd_clear:	
   354                           ; 1 bytes @ 0x0
   355                           
   356  0070                     ?_lcd_start:	
   357                           ; 1 bytes @ 0x0
   358                           
   359  0070                     ?_lcd_print_char:	
   360                           ; 1 bytes @ 0x0
   361                           
   362  0070                     ?_lcd_print_string:	
   363                           ; 1 bytes @ 0x0
   364                           
   365  0070                     ?_main:	
   366                           ; 1 bytes @ 0x0
   367                           
   368  0070                     lcd_setbit@data_bit:	
   369                           ; 2 bytes @ 0x0
   370                           
   371  0070                     get_colm@i:	
   372                           ; 1 bytes @ 0x0
   373                           
   374                           
   375                           ; 2 bytes @ 0x0
   376  0070                     	ds	1
   377  0071                     ??_lcd_cmd:
   378  0071                     ??_lcd_print_char:	
   379                           ; 1 bytes @ 0x1
   380                           
   381                           
   382                           ; 1 bytes @ 0x1
   383  0071                     	ds	1
   384  0072                     ??_get_colm:
   385  0072                     lcd_print_char@lower_nibble:	
   386                           ; 1 bytes @ 0x2
   387                           
   388                           
   389                           ; 1 bytes @ 0x2
   390  0072                     	ds	1
   391  0073                     lcd_cmd@a:
   392  0073                     lcd_print_char@upper_nibble:	
   393                           ; 1 bytes @ 0x3
   394                           
   395                           
   396                           ; 1 bytes @ 0x3
   397  0073                     	ds	1
   398  0074                     ??_lcd_clear:
   399  0074                     ?_lcd_set_cursor:	
   400                           ; 1 bytes @ 0x4
   401                           
   402  0074                     ??_lcd_start:	
   403                           ; 1 bytes @ 0x4
   404                           
   405  0074                     lcd_set_cursor@b:	
   406                           ; 1 bytes @ 0x4
   407                           
   408  0074                     lcd_print_char@data:	
   409                           ; 1 bytes @ 0x4
   410                           
   411                           
   412                           ; 1 bytes @ 0x4
   413  0074                     	ds	1
   414  0075                     ??_lcd_set_cursor:
   415  0075                     lcd_print_char@i:	
   416                           ; 1 bytes @ 0x5
   417                           
   418                           
   419                           ; 2 bytes @ 0x5
   420  0075                     	ds	1
   421  0076                     lcd_set_cursor@a:
   422                           
   423                           ; 1 bytes @ 0x6
   424  0076                     	ds	1
   425  0077                     lcd_set_cursor@z:
   426  0077                     lcd_print_char@i_73:	
   427                           ; 1 bytes @ 0x7
   428                           
   429                           
   430                           ; 2 bytes @ 0x7
   431  0077                     	ds	1
   432  0078                     lcd_set_cursor@y:
   433                           
   434                           ; 1 bytes @ 0x8
   435  0078                     	ds	1
   436  0079                     ??_lcd_print_string:
   437  0079                     lcd_set_cursor@temp:	
   438                           ; 1 bytes @ 0x9
   439                           
   440  0079                     lcd_print_string@i:	
   441                           ; 1 bytes @ 0x9
   442                           
   443                           
   444                           ; 2 bytes @ 0x9
   445  0079                     	ds	2
   446  007B                     lcd_print_string@a:
   447                           
   448                           ; 1 bytes @ 0xB
   449  007B                     	ds	1
   450                           
   451                           	psect	cstackBANK0
   452  0032                     __pcstackBANK0:
   453  0032                     ??_main:
   454                           
   455                           ; 1 bytes @ 0x0
   456  0032                     	ds	3
   457  0035                     main@y:
   458                           
   459                           ; 2 bytes @ 0x3
   460  0035                     	ds	2
   461  0037                     main@j:
   462                           
   463                           ; 2 bytes @ 0x5
   464  0037                     	ds	2
   465                           
   466                           	psect	maintext
   467  066B                     __pmaintext:	
   468 ;;
   469 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   470 ;;
   471 ;; *************** function _main *****************
   472 ;; Defined at:
   473 ;;		line 232 in file "security lock.c"
   474 ;; Parameters:    Size  Location     Type
   475 ;;		None
   476 ;; Auto vars:     Size  Location     Type
   477 ;;  y               2    3[BANK0 ] int 
   478 ;;  j               2    5[BANK0 ] int 
   479 ;;  a               2    0        unsigned int 
   480 ;; Return value:  Size  Location     Type
   481 ;;                  2  141[None  ] int 
   482 ;; Registers used:
   483 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   484 ;; Tracked objects:
   485 ;;		On entry : B00/0
   486 ;;		On exit  : 0/0
   487 ;;		Unchanged: 0/0
   488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   489 ;;      Params:         0       0       0       0       0
   490 ;;      Locals:         0       4       0       0       0
   491 ;;      Temps:          0       3       0       0       0
   492 ;;      Totals:         0       7       0       0       0
   493 ;;Total ram usage:        7 bytes
   494 ;; Hardware stack levels required when called:    3
   495 ;; This function calls:
   496 ;;		_get_colm
   497 ;;		_lcd_clear
   498 ;;		_lcd_print_string
   499 ;;		_lcd_set_cursor
   500 ;;		_lcd_start
   501 ;; This function is called by:
   502 ;;		Startup code after reset
   503 ;; This function uses a non-reentrant model
   504 ;;
   505                           
   506                           
   507                           ;psect for function _main
   508  066B                     _main:
   509  066B                     l1120:	
   510                           ;incstack = 0
   511                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   512                           
   513                           
   514                           ;security lock.c: 234: ;security lock.c: 235:  while (1) {
   515  066B  1683               	bsf	3,5	;RP0=1, select bank1
   516  066C  1303               	bcf	3,6	;RP1=0, select bank1
   517  066D  0188               	clrf	8	;volatile
   518                           
   519                           ;security lock.c: 236:   get_colm(4);
   520  066E  0186               	clrf	6	;volatile
   521  066F                     l1122:
   522                           
   523                           ;security lock.c: 237: 
   524  066F  300F               	movlw	15
   525  0670  0087               	movwf	7	;volatile
   526  0671                     l1124:
   527                           
   528                           ;security lock.c: 238:   if (input[4] == 12) {
   529  0671  1283               	bcf	3,5	;RP0=0, select bank0
   530  0672  1303               	bcf	3,6	;RP1=0, select bank0
   531  0673  0186               	clrf	6	;volatile
   532  0674                     l1126:
   533                           
   534                           ;security lock.c: 240: 
   535  0674  120A  118A  24BD  120A  118A  	fcall	_lcd_start
   536  0679                     l1128:
   537                           
   538                           ;security lock.c: 241:     lcd_clear();
   539  0679  120A  118A  23EA  120A  118A  	fcall	_lcd_clear
   540  067E                     l1130:
   541                           
   542                           ;security lock.c: 242:     lcd_set_cursor(1, 1);
   543  067E  01F4               	clrf	lcd_set_cursor@b
   544  067F  0AF4               	incf	lcd_set_cursor@b,f
   545  0680  3001               	movlw	1
   546  0681  120A  118A  246B  120A  118A  	fcall	_lcd_set_cursor
   547  0686                     l1132:
   548                           
   549                           ;security lock.c: 243:     lcd_print_string("Correct");
   550  0686  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   551  0687  120A  118A  2446  120A  118A  	fcall	_lcd_print_string
   552  068C                     l1134:
   553                           
   554                           ;security lock.c: 245:     PORTB = 0x80;
   555  068C  1283               	bcf	3,5	;RP0=0, select bank0
   556  068D  1303               	bcf	3,6	;RP1=0, select bank0
   557  068E  01B7               	clrf	main@j
   558  068F  01B8               	clrf	main@j+1
   559  0690                     l1136:
   560                           
   561                           ;security lock.c: 248: 
   562  0690  1283               	bcf	3,5	;RP0=0, select bank0
   563  0691  1303               	bcf	3,6	;RP1=0, select bank0
   564  0692  0838               	movf	main@j+1,w
   565  0693  3A80               	xorlw	128
   566  0694  00FF               	movwf	btemp+1
   567  0695  3080               	movlw	128
   568  0696  027F               	subwf	btemp+1,w
   569  0697  1D03               	skipz
   570  0698  2E9B               	goto	u845
   571  0699  3004               	movlw	4
   572  069A  0237               	subwf	main@j,w
   573  069B                     u845:
   574  069B  1803               	skipnc
   575  069C  2E9E               	goto	u841
   576  069D  2E9F               	goto	u840
   577  069E                     u841:
   578  069E  2F58               	goto	l1174
   579  069F                     u840:
   580  069F                     l1138:
   581                           
   582                           ;security lock.c: 249:     break;;security lock.c: 250:    } else {
   583  069F  3001               	movlw	1
   584  06A0  1283               	bcf	3,5	;RP0=0, select bank0
   585  06A1  1303               	bcf	3,6	;RP1=0, select bank0
   586  06A2  00B5               	movwf	main@y
   587  06A3  3000               	movlw	0
   588  06A4  00B6               	movwf	main@y+1
   589  06A5                     l1144:
   590                           
   591                           ;security lock.c: 251:     lcd_clear();
   592  06A5  1283               	bcf	3,5	;RP0=0, select bank0
   593  06A6  1303               	bcf	3,6	;RP1=0, select bank0
   594  06A7  0838               	movf	main@j+1,w
   595  06A8  00F1               	movwf	get_colm@i+1
   596  06A9  0837               	movf	main@j,w
   597  06AA  00F0               	movwf	get_colm@i
   598  06AB  120A  118A  2571  120A  118A  	fcall	_get_colm
   599  06B0                     l1146:
   600                           
   601                           ;security lock.c: 252:     lcd_set_cursor(1, 1);
   602  06B0  1283               	bcf	3,5	;RP0=0, select bank0
   603  06B1  1303               	bcf	3,6	;RP1=0, select bank0
   604  06B2  0837               	movf	main@j,w
   605  06B3  00B2               	movwf	??_main
   606  06B4  0732               	addwf	??_main,w
   607  06B5  3E20               	addlw	(low (_input| 0))& (0+255)
   608  06B6  0084               	movwf	4
   609  06B7  1383               	bcf	3,7	;select IRP bank0
   610  06B8  0800               	movf	0,w
   611  06B9  00B3               	movwf	??_main+1
   612  06BA  0A84               	incf	4,f
   613  06BB  0800               	movf	0,w
   614  06BC  00B4               	movwf	??_main+2
   615  06BD  1BB4               	btfsc	??_main+2,7
   616  06BE  2EC0               	goto	u851
   617  06BF  2EC1               	goto	u850
   618  06C0                     u851:
   619  06C0  2EF3               	goto	l1156
   620  06C1                     u850:
   621  06C1                     l1148:
   622  06C1  0837               	movf	main@j,w
   623  06C2  00B2               	movwf	??_main
   624  06C3  0732               	addwf	??_main,w
   625  06C4  3E20               	addlw	(low (_input| 0))& (0+255)
   626  06C5  0084               	movwf	4
   627  06C6  0800               	movf	0,w
   628  06C7  00B3               	movwf	??_main+1
   629  06C8  0A84               	incf	4,f
   630  06C9  0800               	movf	0,w
   631  06CA  00B4               	movwf	??_main+2
   632  06CB  0834               	movf	??_main+2,w
   633  06CC  3A80               	xorlw	128
   634  06CD  00FF               	movwf	btemp+1
   635  06CE  3080               	movlw	128
   636  06CF  027F               	subwf	btemp+1,w
   637  06D0  1D03               	skipz
   638  06D1  2ED4               	goto	u865
   639  06D2  300A               	movlw	10
   640  06D3  0233               	subwf	??_main+1,w
   641  06D4                     u865:
   642  06D4  1803               	skipnc
   643  06D5  2ED7               	goto	u861
   644  06D6  2ED8               	goto	u860
   645  06D7                     u861:
   646  06D7  2EF3               	goto	l1156
   647  06D8                     u860:
   648  06D8                     l1150:
   649                           
   650                           ;security lock.c: 253:     lcd_print_string("Incorrect");
   651  06D8  1283               	bcf	3,5	;RP0=0, select bank0
   652  06D9  1303               	bcf	3,6	;RP1=0, select bank0
   653  06DA  0835               	movf	main@y,w
   654  06DB  00FF               	movwf	btemp+1
   655  06DC  087F               	movf	btemp+1,w
   656  06DD  00F4               	movwf	lcd_set_cursor@b
   657  06DE  3002               	movlw	2
   658  06DF  120A  118A  246B  120A  118A  	fcall	_lcd_set_cursor
   659  06E4                     l1152:
   660                           
   661                           ;security lock.c: 254: 
   662  06E4  3024               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   663  06E5  120A  118A  2446  120A  118A  	fcall	_lcd_print_string
   664  06EA                     l1154:
   665                           
   666                           ;security lock.c: 255:     PORTB = 0x02;
   667  06EA  3001               	movlw	1
   668  06EB  1283               	bcf	3,5	;RP0=0, select bank0
   669  06EC  1303               	bcf	3,6	;RP1=0, select bank0
   670  06ED  07B7               	addwf	main@j,f
   671  06EE  1803               	skipnc
   672  06EF  0AB8               	incf	main@j+1,f
   673  06F0  3000               	movlw	0
   674  06F1  07B8               	addwf	main@j+1,f
   675                           
   676                           ;security lock.c: 256: 
   677  06F2  2F44               	goto	l147
   678  06F3                     l1156:
   679  06F3  1283               	bcf	3,5	;RP0=0, select bank0
   680  06F4  1303               	bcf	3,6	;RP1=0, select bank0
   681  06F5  0838               	movf	main@j+1,w
   682  06F6  3A80               	xorlw	128
   683  06F7  00FF               	movwf	btemp+1
   684  06F8  3080               	movlw	128
   685  06F9  027F               	subwf	btemp+1,w
   686  06FA  1D03               	skipz
   687  06FB  2EFE               	goto	u875
   688  06FC  3001               	movlw	1
   689  06FD  0237               	subwf	main@j,w
   690  06FE                     u875:
   691  06FE  1C03               	skipc
   692  06FF  2F01               	goto	u871
   693  0700  2F02               	goto	u870
   694  0701                     u871:
   695  0701  2F3B               	goto	l148
   696  0702                     u870:
   697  0702                     l1158:
   698  0702  1283               	bcf	3,5	;RP0=0, select bank0
   699  0703  1303               	bcf	3,6	;RP1=0, select bank0
   700  0704  0837               	movf	main@j,w
   701  0705  00B2               	movwf	??_main
   702  0706  0732               	addwf	??_main,w
   703  0707  3E20               	addlw	(low (_input| 0))& (0+255)
   704  0708  0084               	movwf	4
   705  0709  1383               	bcf	3,7	;select IRP bank0
   706  070A  0800               	movf	0,w
   707  070B  00B3               	movwf	??_main+1
   708  070C  0A84               	incf	4,f
   709  070D  0800               	movf	0,w
   710  070E  00B4               	movwf	??_main+2
   711  070F  300B               	movlw	11
   712  0710  0633               	xorwf	??_main+1,w
   713  0711  0434               	iorwf	??_main+2,w
   714  0712  1D03               	btfss	3,2
   715  0713  2F15               	goto	u881
   716  0714  2F16               	goto	u880
   717  0715                     u881:
   718  0715  2F3B               	goto	l148
   719  0716                     u880:
   720  0716                     l1160:
   721                           
   722                           ;security lock.c: 257:     _delay((unsigned long)((1100)*(20000000/4000.0)));
   723  0716  30FF               	movlw	255
   724  0717  07B5               	addwf	main@y,f
   725  0718  1803               	skipnc
   726  0719  0AB6               	incf	main@y+1,f
   727  071A  30FF               	movlw	255
   728  071B  07B6               	addwf	main@y+1,f
   729  071C                     l1162:
   730                           
   731                           ;security lock.c: 259:     break;
   732  071C  0835               	movf	main@y,w
   733  071D  00FF               	movwf	btemp+1
   734  071E  087F               	movf	btemp+1,w
   735  071F  00F4               	movwf	lcd_set_cursor@b
   736  0720  3002               	movlw	2
   737  0721  120A  118A  246B  120A  118A  	fcall	_lcd_set_cursor
   738  0726                     l1164:
   739                           
   740                           ;security lock.c: 260:    }
   741  0726  3022               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   742  0727  120A  118A  2446  120A  118A  	fcall	_lcd_print_string
   743  072C                     l1166:
   744                           
   745                           ;security lock.c: 262:    __nop();
   746  072C  30FF               	movlw	255
   747  072D  1283               	bcf	3,5	;RP0=0, select bank0
   748  072E  1303               	bcf	3,6	;RP1=0, select bank0
   749  072F  07B5               	addwf	main@y,f
   750  0730  1803               	skipnc
   751  0731  0AB6               	incf	main@y+1,f
   752  0732  30FF               	movlw	255
   753  0733  07B6               	addwf	main@y+1,f
   754  0734                     l1168:
   755                           
   756                           ;security lock.c: 263:   }
   757  0734  30FF               	movlw	255
   758  0735  07B7               	addwf	main@j,f
   759  0736  1803               	skipnc
   760  0737  0AB8               	incf	main@j+1,f
   761  0738  30FF               	movlw	255
   762  0739  07B8               	addwf	main@j+1,f
   763                           
   764                           ;security lock.c: 264:  }
   765  073A  2F44               	goto	l147
   766  073B                     l148:
   767                           
   768                           ;security lock.c: 265:  return 0;
   769  073B  0000               	nop
   770  073C                     l1170:
   771                           
   772                           ;security lock.c: 266: }
   773  073C  30FF               	movlw	255
   774  073D  1283               	bcf	3,5	;RP0=0, select bank0
   775  073E  1303               	bcf	3,6	;RP1=0, select bank0
   776  073F  07B5               	addwf	main@y,f
   777  0740  1803               	skipnc
   778  0741  0AB6               	incf	main@y+1,f
   779  0742  30FF               	movlw	255
   780  0743  07B6               	addwf	main@y+1,f
   781  0744                     l147:
   782  0744  3001               	movlw	1
   783  0745  07B5               	addwf	main@y,f
   784  0746  1803               	skipnc
   785  0747  0AB6               	incf	main@y+1,f
   786  0748  3000               	movlw	0
   787  0749  07B6               	addwf	main@y+1,f
   788  074A                     l1172:
   789  074A  0836               	movf	main@y+1,w
   790  074B  3A80               	xorlw	128
   791  074C  00FF               	movwf	btemp+1
   792  074D  3080               	movlw	128
   793  074E  027F               	subwf	btemp+1,w
   794  074F  1D03               	skipz
   795  0750  2F53               	goto	u895
   796  0751  3005               	movlw	5
   797  0752  0235               	subwf	main@y,w
   798  0753                     u895:
   799  0753  1C03               	skipc
   800  0754  2F56               	goto	u891
   801  0755  2F57               	goto	u890
   802  0756                     u891:
   803  0756  2EA5               	goto	l1144
   804  0757                     u890:
   805  0757  2E90               	goto	l1136
   806  0758                     l1174:
   807  0758  3004               	movlw	4
   808  0759  00F0               	movwf	get_colm@i
   809  075A  3000               	movlw	0
   810  075B  00F1               	movwf	get_colm@i+1
   811  075C  120A  118A  2571  120A  118A  	fcall	_get_colm
   812  0761                     l1176:
   813  0761  300C               	movlw	12
   814  0762  1283               	bcf	3,5	;RP0=0, select bank0
   815  0763  1303               	bcf	3,6	;RP1=0, select bank0
   816  0764  0628               	xorwf	_input+8,w
   817  0765  0429               	iorwf	_input+9,w
   818  0766  1D03               	btfss	3,2
   819  0767  2F69               	goto	u901
   820  0768  2F6A               	goto	u900
   821  0769                     u901:
   822  0769  2FDF               	goto	l154
   823  076A                     u900:
   824  076A                     l1178:
   825  076A  082B               	movf	_pass+1,w
   826  076B  0621               	xorwf	_input+1,w
   827  076C  1D03               	skipz
   828  076D  2F70               	goto	u915
   829  076E  082A               	movf	_pass,w
   830  076F  0620               	xorwf	_input,w
   831  0770                     u915:
   832  0770  1D03               	skipz
   833  0771  2F73               	goto	u911
   834  0772  2F74               	goto	u910
   835  0773                     u911:
   836  0773  2FB8               	goto	l1198
   837  0774                     u910:
   838  0774                     l1180:
   839  0774  082D               	movf	_pass+3,w
   840  0775  0623               	xorwf	_input+3,w
   841  0776  1D03               	skipz
   842  0777  2F7A               	goto	u925
   843  0778  082C               	movf	_pass+2,w
   844  0779  0622               	xorwf	_input+2,w
   845  077A                     u925:
   846  077A  1D03               	skipz
   847  077B  2F7D               	goto	u921
   848  077C  2F7E               	goto	u920
   849  077D                     u921:
   850  077D  2FB8               	goto	l1198
   851  077E                     u920:
   852  077E                     l1182:
   853  077E  082F               	movf	_pass+5,w
   854  077F  0625               	xorwf	_input+5,w
   855  0780  1D03               	skipz
   856  0781  2F84               	goto	u935
   857  0782  082E               	movf	_pass+4,w
   858  0783  0624               	xorwf	_input+4,w
   859  0784                     u935:
   860  0784  1D03               	skipz
   861  0785  2F87               	goto	u931
   862  0786  2F88               	goto	u930
   863  0787                     u931:
   864  0787  2FB8               	goto	l1198
   865  0788                     u930:
   866  0788                     l1184:
   867  0788  0831               	movf	_pass+7,w
   868  0789  0627               	xorwf	_input+7,w
   869  078A  1D03               	skipz
   870  078B  2F8E               	goto	u945
   871  078C  0830               	movf	_pass+6,w
   872  078D  0626               	xorwf	_input+6,w
   873  078E                     u945:
   874  078E  1D03               	skipz
   875  078F  2F91               	goto	u941
   876  0790  2F92               	goto	u940
   877  0791                     u941:
   878  0791  2FB8               	goto	l1198
   879  0792                     u940:
   880  0792                     l1186:
   881  0792  120A  118A  23EA  120A  118A  	fcall	_lcd_clear
   882  0797                     l1188:
   883  0797  01F4               	clrf	lcd_set_cursor@b
   884  0798  0AF4               	incf	lcd_set_cursor@b,f
   885  0799  3001               	movlw	1
   886  079A  120A  118A  246B  120A  118A  	fcall	_lcd_set_cursor
   887  079F                     l1190:
   888  079F  301A               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   889  07A0  120A  118A  2446  120A  118A  	fcall	_lcd_print_string
   890  07A5                     l1192:
   891  07A5  3080               	movlw	128
   892  07A6  1283               	bcf	3,5	;RP0=0, select bank0
   893  07A7  1303               	bcf	3,6	;RP1=0, select bank0
   894  07A8  0086               	movwf	6	;volatile
   895  07A9                     l1194:
   896  07A9  30FE               	movlw	254
   897  07AA  1283               	bcf	3,5	;RP0=0, select bank0
   898  07AB  1303               	bcf	3,6	;RP1=0, select bank0
   899  07AC  00B4               	movwf	??_main+2
   900  07AD  30A7               	movlw	167
   901  07AE  00B3               	movwf	??_main+1
   902  07AF  3065               	movlw	101
   903  07B0  00B2               	movwf	??_main
   904  07B1                     u957:
   905  07B1  0BB2               	decfsz	??_main,f
   906  07B2  2FB1               	goto	u957
   907  07B3  0BB3               	decfsz	??_main+1,f
   908  07B4  2FB1               	goto	u957
   909  07B5  0BB4               	decfsz	??_main+2,f
   910  07B6  2FB1               	goto	u957
   911  07B7  2FE1               	goto	l160
   912  07B8                     l1198:
   913  07B8  120A  118A  23EA  120A  118A  	fcall	_lcd_clear
   914  07BD                     l1200:
   915  07BD  01F4               	clrf	lcd_set_cursor@b
   916  07BE  0AF4               	incf	lcd_set_cursor@b,f
   917  07BF  3001               	movlw	1
   918  07C0  120A  118A  246B  120A  118A  	fcall	_lcd_set_cursor
   919  07C5                     l1202:
   920  07C5  3010               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   921  07C6  120A  118A  2446  120A  118A  	fcall	_lcd_print_string
   922  07CB                     l1204:
   923  07CB  3002               	movlw	2
   924  07CC  1283               	bcf	3,5	;RP0=0, select bank0
   925  07CD  1303               	bcf	3,6	;RP1=0, select bank0
   926  07CE  0086               	movwf	6	;volatile
   927  07CF                     l1206:
   928  07CF  301C               	movlw	28
   929  07D0  1283               	bcf	3,5	;RP0=0, select bank0
   930  07D1  1303               	bcf	3,6	;RP1=0, select bank0
   931  07D2  00B4               	movwf	??_main+2
   932  07D3  30E7               	movlw	231
   933  07D4  00B3               	movwf	??_main+1
   934  07D5  30C6               	movlw	198
   935  07D6  00B2               	movwf	??_main
   936  07D7                     u967:
   937  07D7  0BB2               	decfsz	??_main,f
   938  07D8  2FD7               	goto	u967
   939  07D9  0BB3               	decfsz	??_main+1,f
   940  07DA  2FD7               	goto	u967
   941  07DB  0BB4               	decfsz	??_main+2,f
   942  07DC  2FD7               	goto	u967
   943  07DD  0000               	nop
   944  07DE  2FE1               	goto	l160
   945  07DF                     l154:
   946  07DF  0000               	nop
   947  07E0  2F58               	goto	l1174
   948  07E1                     l160:
   949  07E1  120A  118A  2800   	ljmp	start
   950  07E4                     __end_of_main:
   951                           
   952                           	psect	text1
   953  04BD                     __ptext1:	
   954 ;; *************** function _lcd_start *****************
   955 ;; Defined at:
   956 ;;		line 189 in file "security lock.c"
   957 ;; Parameters:    Size  Location     Type
   958 ;;		None
   959 ;; Auto vars:     Size  Location     Type
   960 ;;  i               2    0        int 
   961 ;; Return value:  Size  Location     Type
   962 ;;                  1    wreg      void 
   963 ;; Registers used:
   964 ;;		wreg, status,2, status,0, pclath, cstack
   965 ;; Tracked objects:
   966 ;;		On entry : 0/0
   967 ;;		On exit  : 0/0
   968 ;;		Unchanged: 0/0
   969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   970 ;;      Params:         0       0       0       0       0
   971 ;;      Locals:         2       0       0       0       0
   972 ;;      Temps:          2       0       0       0       0
   973 ;;      Totals:         4       0       0       0       0
   974 ;;Total ram usage:        4 bytes
   975 ;; Hardware stack levels used:    1
   976 ;; Hardware stack levels required when called:    2
   977 ;; This function calls:
   978 ;;		_lcd_cmd
   979 ;;		_lcd_setbit
   980 ;; This function is called by:
   981 ;;		_main
   982 ;; This function uses a non-reentrant model
   983 ;;
   984                           
   985                           
   986                           ;psect for function _lcd_start
   987  04BD                     _lcd_start:
   988  04BD                     l1078:	
   989                           ;incstack = 0
   990                           ; Regs used in _lcd_start: [wreg+status,2+status,0+pclath+cstack]
   991                           
   992                           
   993                           ;security lock.c: 191: }
   994  04BD  3000               	movlw	0
   995  04BE  120A  118A  2424  120A  118A  	fcall	_lcd_setbit
   996  04C3                     l1080:
   997  04C3                     l1082:
   998  04C3                     l1090:
   999                           
  1000                           ;security lock.c: 195:  unsigned int a;
  1001  04C3  3003               	movlw	3
  1002  04C4  120A  118A  240A  120A  118A  	fcall	_lcd_cmd
  1003  04C9                     l1092:
  1004                           
  1005                           ;security lock.c: 196:  TRISD = 0x00;
  1006  04C9  3021               	movlw	33
  1007  04CA  00F5               	movwf	??_lcd_start+1
  1008  04CB  3076               	movlw	118
  1009  04CC  00F4               	movwf	??_lcd_start
  1010  04CD                     u977:
  1011  04CD  0BF4               	decfsz	??_lcd_start,f
  1012  04CE  2CCD               	goto	u977
  1013  04CF  0BF5               	decfsz	??_lcd_start+1,f
  1014  04D0  2CCD               	goto	u977
  1015  04D1  0000               	nop
  1016  04D2                     l1094:
  1017                           
  1018                           ;security lock.c: 197:  TRISB = 0x00;
  1019  04D2  3003               	movlw	3
  1020  04D3  120A  118A  240A  120A  118A  	fcall	_lcd_cmd
  1021                           
  1022                           ;security lock.c: 198:  TRISC = 0X0F;
  1023  04D8  3048               	movlw	72
  1024  04D9  00F5               	movwf	??_lcd_start+1
  1025  04DA  306C               	movlw	108
  1026  04DB  00F4               	movwf	??_lcd_start
  1027  04DC                     u987:
  1028  04DC  0BF4               	decfsz	??_lcd_start,f
  1029  04DD  2CDC               	goto	u987
  1030  04DE  0BF5               	decfsz	??_lcd_start+1,f
  1031  04DF  2CDC               	goto	u987
  1032  04E0  0000               	nop
  1033  04E1                     l1096:
  1034                           
  1035                           ;security lock.c: 199:  PORTB = 0x00;
  1036  04E1  3003               	movlw	3
  1037  04E2  120A  118A  240A  120A  118A  	fcall	_lcd_cmd
  1038  04E7                     l1098:
  1039                           
  1040                           ;security lock.c: 200: 
  1041  04E7  3002               	movlw	2
  1042  04E8  120A  118A  240A  120A  118A  	fcall	_lcd_cmd
  1043  04ED                     l1100:
  1044                           
  1045                           ;security lock.c: 201:  lcd_start();
  1046  04ED  3002               	movlw	2
  1047  04EE  120A  118A  240A  120A  118A  	fcall	_lcd_cmd
  1048  04F3                     l1102:
  1049                           
  1050                           ;security lock.c: 202:  lcd_clear();
  1051  04F3  3008               	movlw	8
  1052  04F4  120A  118A  240A  120A  118A  	fcall	_lcd_cmd
  1053  04F9                     l1104:
  1054                           
  1055                           ;security lock.c: 203:  lcd_set_cursor(1, 1);
  1056  04F9  3000               	movlw	0
  1057  04FA  120A  118A  240A  120A  118A  	fcall	_lcd_cmd
  1058  04FF                     l1106:
  1059                           
  1060                           ;security lock.c: 204:  lcd_print_string("Input Password");
  1061  04FF  300C               	movlw	12
  1062  0500  120A  118A  240A  120A  118A  	fcall	_lcd_cmd
  1063  0505                     l1108:
  1064                           
  1065                           ;security lock.c: 205: 
  1066  0505  3000               	movlw	0
  1067  0506  120A  118A  240A  120A  118A  	fcall	_lcd_cmd
  1068  050B                     l1110:
  1069                           
  1070                           ;security lock.c: 206:  int j = 0;
  1071  050B  3006               	movlw	6
  1072  050C  120A  118A  240A  120A  118A  	fcall	_lcd_cmd
  1073  0511                     l124:
  1074  0511  0008               	return
  1075  0512                     __end_of_lcd_start:
  1076                           
  1077                           	psect	text2
  1078  046B                     __ptext2:	
  1079 ;; *************** function _lcd_set_cursor *****************
  1080 ;; Defined at:
  1081 ;;		line 171 in file "security lock.c"
  1082 ;; Parameters:    Size  Location     Type
  1083 ;;  a               1    wreg     unsigned char 
  1084 ;;  b               1    4[COMMON] unsigned char 
  1085 ;; Auto vars:     Size  Location     Type
  1086 ;;  a               1    6[COMMON] unsigned char 
  1087 ;;  temp            1    9[COMMON] unsigned char 
  1088 ;;  y               1    8[COMMON] unsigned char 
  1089 ;;  z               1    7[COMMON] unsigned char 
  1090 ;; Return value:  Size  Location     Type
  1091 ;;                  1    wreg      void 
  1092 ;; Registers used:
  1093 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1094 ;; Tracked objects:
  1095 ;;		On entry : 0/0
  1096 ;;		On exit  : 0/0
  1097 ;;		Unchanged: 0/0
  1098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1099 ;;      Params:         1       0       0       0       0
  1100 ;;      Locals:         4       0       0       0       0
  1101 ;;      Temps:          1       0       0       0       0
  1102 ;;      Totals:         6       0       0       0       0
  1103 ;;Total ram usage:        6 bytes
  1104 ;; Hardware stack levels used:    1
  1105 ;; Hardware stack levels required when called:    2
  1106 ;; This function calls:
  1107 ;;		_lcd_cmd
  1108 ;; This function is called by:
  1109 ;;		_main
  1110 ;; This function uses a non-reentrant model
  1111 ;;
  1112                           
  1113                           
  1114                           ;psect for function _lcd_set_cursor
  1115  046B                     _lcd_set_cursor:
  1116                           
  1117                           ;incstack = 0
  1118                           ; Regs used in _lcd_set_cursor: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1119                           ;lcd_set_cursor@a stored from wreg
  1120  046B  00F6               	movwf	lcd_set_cursor@a
  1121  046C                     l1058:
  1122                           
  1123                           ;security lock.c: 171: {;security lock.c: 172:  char lower_nibble, upper_nibble;;securit
      +                          y lock.c: 173:  lower_nibble = data & 0x0F;;security lock.c: 174:  upper_nibble = data &
      +                           0xF0;
  1124  046C  0376               	decf	lcd_set_cursor@a,w
  1125  046D  1D03               	btfss	3,2
  1126  046E  2C70               	goto	u791
  1127  046F  2C71               	goto	u790
  1128  0470                     u791:
  1129  0470  2C94               	goto	l1068
  1130  0471                     u790:
  1131  0471                     l1060:
  1132                           
  1133                           ;security lock.c: 175:  RD2 = 1;
  1134  0471  0874               	movf	lcd_set_cursor@b,w
  1135  0472  3E7F               	addlw	127
  1136  0473  00FF               	movwf	btemp+1
  1137  0474  087F               	movf	btemp+1,w
  1138  0475  00F9               	movwf	lcd_set_cursor@temp
  1139                           
  1140                           ;security lock.c: 176:  lcd_setbit(upper_nibble >> 4);
  1141  0476  0879               	movf	lcd_set_cursor@temp,w
  1142  0477  00F5               	movwf	??_lcd_set_cursor
  1143  0478  3004               	movlw	4
  1144  0479                     u805:
  1145  0479  1003               	clrc
  1146  047A  0CF5               	rrf	??_lcd_set_cursor,f
  1147  047B  3EFF               	addlw	-1
  1148  047C  1D03               	skipz
  1149  047D  2C79               	goto	u805
  1150  047E  0875               	movf	??_lcd_set_cursor,w
  1151  047F  00FF               	movwf	btemp+1
  1152  0480  087F               	movf	btemp+1,w
  1153  0481  00F7               	movwf	lcd_set_cursor@z
  1154  0482                     l1062:
  1155                           
  1156                           ;security lock.c: 177:  RD3 = 1;
  1157  0482  0879               	movf	lcd_set_cursor@temp,w
  1158  0483  390F               	andlw	15
  1159  0484  00FF               	movwf	btemp+1
  1160  0485  087F               	movf	btemp+1,w
  1161  0486  00F8               	movwf	lcd_set_cursor@y
  1162  0487                     l1064:
  1163                           
  1164                           ;security lock.c: 178:  for (int i = 2130483; i <= 0; i--) __nop();
  1165  0487  0877               	movf	lcd_set_cursor@z,w
  1166  0488  120A  118A  240A  120A  118A  	fcall	_lcd_cmd
  1167  048D                     l1066:
  1168                           
  1169                           ;security lock.c: 179:  RD3 = 0;
  1170  048D  0878               	movf	lcd_set_cursor@y,w
  1171  048E  120A  118A  240A  120A  118A  	fcall	_lcd_cmd
  1172                           
  1173                           ;security lock.c: 180:  lcd_setbit(lower_nibble);
  1174  0493  2CBC               	goto	l119
  1175  0494                     l1068:
  1176  0494  3002               	movlw	2
  1177  0495  0676               	xorwf	lcd_set_cursor@a,w
  1178  0496  1D03               	btfss	3,2
  1179  0497  2C99               	goto	u811
  1180  0498  2C9A               	goto	u810
  1181  0499                     u811:
  1182  0499  2CBC               	goto	l119
  1183  049A                     u810:
  1184  049A                     l1070:
  1185                           
  1186                           ;security lock.c: 181:  RD3 = 1;
  1187  049A  0874               	movf	lcd_set_cursor@b,w
  1188  049B  3EBF               	addlw	191
  1189  049C  00FF               	movwf	btemp+1
  1190  049D  087F               	movf	btemp+1,w
  1191  049E  00F9               	movwf	lcd_set_cursor@temp
  1192                           
  1193                           ;security lock.c: 182:  for (int i = 2130483; i <= 0; i--) __nop();
  1194  049F  0879               	movf	lcd_set_cursor@temp,w
  1195  04A0  00F5               	movwf	??_lcd_set_cursor
  1196  04A1  3004               	movlw	4
  1197  04A2                     u825:
  1198  04A2  1003               	clrc
  1199  04A3  0CF5               	rrf	??_lcd_set_cursor,f
  1200  04A4  3EFF               	addlw	-1
  1201  04A5  1D03               	skipz
  1202  04A6  2CA2               	goto	u825
  1203  04A7  0875               	movf	??_lcd_set_cursor,w
  1204  04A8  00FF               	movwf	btemp+1
  1205  04A9  087F               	movf	btemp+1,w
  1206  04AA  00F7               	movwf	lcd_set_cursor@z
  1207  04AB                     l1072:
  1208                           
  1209                           ;security lock.c: 183:  RD3 = 0;
  1210  04AB  0879               	movf	lcd_set_cursor@temp,w
  1211  04AC  390F               	andlw	15
  1212  04AD  00FF               	movwf	btemp+1
  1213  04AE  087F               	movf	btemp+1,w
  1214  04AF  00F8               	movwf	lcd_set_cursor@y
  1215  04B0                     l1074:
  1216                           
  1217                           ;security lock.c: 184: }
  1218  04B0  0877               	movf	lcd_set_cursor@z,w
  1219  04B1  120A  118A  240A  120A  118A  	fcall	_lcd_cmd
  1220  04B6                     l1076:
  1221                           
  1222                           ;security lock.c: 185: 
  1223  04B6  0878               	movf	lcd_set_cursor@y,w
  1224  04B7  120A  118A  240A  120A  118A  	fcall	_lcd_cmd
  1225  04BC                     l119:
  1226  04BC  0008               	return
  1227  04BD                     __end_of_lcd_set_cursor:
  1228                           
  1229                           	psect	text3
  1230  0446                     __ptext3:	
  1231 ;; *************** function _lcd_print_string *****************
  1232 ;; Defined at:
  1233 ;;		line 225 in file "security lock.c"
  1234 ;; Parameters:    Size  Location     Type
  1235 ;;  a               1    wreg     PTR unsigned char 
  1236 ;;		 -> STR_5(10), STR_4(8), STR_3(2), STR_2(2), 
  1237 ;;		 -> STR_1(15), 
  1238 ;; Auto vars:     Size  Location     Type
  1239 ;;  a               1   11[COMMON] PTR unsigned char 
  1240 ;;		 -> STR_5(10), STR_4(8), STR_3(2), STR_2(2), 
  1241 ;;		 -> STR_1(15), 
  1242 ;;  i               2    9[COMMON] int 
  1243 ;; Return value:  Size  Location     Type
  1244 ;;                  1    wreg      void 
  1245 ;; Registers used:
  1246 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1247 ;; Tracked objects:
  1248 ;;		On entry : 0/0
  1249 ;;		On exit  : 0/0
  1250 ;;		Unchanged: 0/0
  1251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1252 ;;      Params:         0       0       0       0       0
  1253 ;;      Locals:         3       0       0       0       0
  1254 ;;      Temps:          0       0       0       0       0
  1255 ;;      Totals:         3       0       0       0       0
  1256 ;;Total ram usage:        3 bytes
  1257 ;; Hardware stack levels used:    1
  1258 ;; Hardware stack levels required when called:    2
  1259 ;; This function calls:
  1260 ;;		_lcd_print_char
  1261 ;; This function is called by:
  1262 ;;		_main
  1263 ;; This function uses a non-reentrant model
  1264 ;;
  1265                           
  1266                           
  1267                           ;psect for function _lcd_print_string
  1268  0446                     _lcd_print_string:
  1269                           
  1270                           ;incstack = 0
  1271                           ; Regs used in _lcd_print_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1272                           ;lcd_print_string@a stored from wreg
  1273  0446  00FB               	movwf	lcd_print_string@a
  1274  0447                     l1112:
  1275                           
  1276                           ;security lock.c: 225:     } else {;security lock.c: 226:      __nop();;security lock.c:
      +                           227:      y--;;security lock.c: 228:     }
  1277  0447  01F9               	clrf	lcd_print_string@i
  1278  0448  01FA               	clrf	lcd_print_string@i+1
  1279  0449  2C5D               	goto	l1118
  1280  044A                     l1114:
  1281                           
  1282                           ;security lock.c: 229:    }
  1283  044A  0879               	movf	lcd_print_string@i,w
  1284  044B  077B               	addwf	lcd_print_string@a,w
  1285  044C  0084               	movwf	4
  1286  044D  120A  118A  2003  120A  118A  	fcall	stringdir
  1287  0452  120A  118A  2512  120A  118A  	fcall	_lcd_print_char
  1288  0457                     l1116:
  1289  0457  3001               	movlw	1
  1290  0458  07F9               	addwf	lcd_print_string@i,f
  1291  0459  1803               	skipnc
  1292  045A  0AFA               	incf	lcd_print_string@i+1,f
  1293  045B  3000               	movlw	0
  1294  045C  07FA               	addwf	lcd_print_string@i+1,f
  1295  045D                     l1118:
  1296  045D  0879               	movf	lcd_print_string@i,w
  1297  045E  077B               	addwf	lcd_print_string@a,w
  1298  045F  0084               	movwf	4
  1299  0460  120A  118A  2003  120A  118A  	fcall	stringdir
  1300  0465  3A00               	xorlw	0
  1301  0466  1D03               	skipz
  1302  0467  2C69               	goto	u831
  1303  0468  2C6A               	goto	u830
  1304  0469                     u831:
  1305  0469  2C4A               	goto	l1114
  1306  046A                     u830:
  1307  046A                     l137:
  1308  046A  0008               	return
  1309  046B                     __end_of_lcd_print_string:
  1310                           
  1311                           	psect	text4
  1312  0512                     __ptext4:	
  1313 ;; *************** function _lcd_print_char *****************
  1314 ;; Defined at:
  1315 ;;		line 209 in file "security lock.c"
  1316 ;; Parameters:    Size  Location     Type
  1317 ;;  data            1    wreg     unsigned char 
  1318 ;; Auto vars:     Size  Location     Type
  1319 ;;  data            1    4[COMMON] unsigned char 
  1320 ;;  i               2    7[COMMON] int 
  1321 ;;  i               2    5[COMMON] int 
  1322 ;;  upper_nibble    1    3[COMMON] unsigned char 
  1323 ;;  lower_nibble    1    2[COMMON] unsigned char 
  1324 ;; Return value:  Size  Location     Type
  1325 ;;                  1    wreg      void 
  1326 ;; Registers used:
  1327 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1328 ;; Tracked objects:
  1329 ;;		On entry : 0/0
  1330 ;;		On exit  : 0/0
  1331 ;;		Unchanged: 0/0
  1332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1333 ;;      Params:         0       0       0       0       0
  1334 ;;      Locals:         7       0       0       0       0
  1335 ;;      Temps:          1       0       0       0       0
  1336 ;;      Totals:         8       0       0       0       0
  1337 ;;Total ram usage:        8 bytes
  1338 ;; Hardware stack levels used:    1
  1339 ;; Hardware stack levels required when called:    1
  1340 ;; This function calls:
  1341 ;;		_lcd_setbit
  1342 ;; This function is called by:
  1343 ;;		_lcd_print_string
  1344 ;; This function uses a non-reentrant model
  1345 ;;
  1346                           
  1347                           
  1348                           ;psect for function _lcd_print_char
  1349  0512                     _lcd_print_char:
  1350                           
  1351                           ;incstack = 0
  1352                           ; Regs used in _lcd_print_char: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1353                           ;lcd_print_char@data stored from wreg
  1354  0512  00F4               	movwf	lcd_print_char@data
  1355  0513                     l1000:
  1356                           
  1357                           ;security lock.c: 209:   if (j < 4) {;security lock.c: 210:    int y;;security lock.c: 2
      +                          11:    for (y = 1; y <= 4; y++) {;security lock.c: 212:     get_colm(j);
  1358  0513  0874               	movf	lcd_print_char@data,w
  1359  0514  390F               	andlw	15
  1360  0515  00FF               	movwf	btemp+1
  1361  0516  087F               	movf	btemp+1,w
  1362  0517  00F2               	movwf	lcd_print_char@lower_nibble
  1363                           
  1364                           ;security lock.c: 213:     if (input[j] >= 0 && input[j] <= 9) {
  1365  0518  0874               	movf	lcd_print_char@data,w
  1366  0519  39F0               	andlw	240
  1367  051A  00FF               	movwf	btemp+1
  1368  051B  087F               	movf	btemp+1,w
  1369  051C  00F3               	movwf	lcd_print_char@upper_nibble
  1370  051D                     l1002:
  1371                           
  1372                           ;security lock.c: 214:      lcd_set_cursor(2, y);
  1373  051D  1283               	bcf	3,5	;RP0=0, select bank0
  1374  051E  1303               	bcf	3,6	;RP1=0, select bank0
  1375  051F  1508               	bsf	8,2	;volatile
  1376  0520                     l1004:
  1377                           
  1378                           ;security lock.c: 215:      lcd_print_string("*");
  1379  0520  0873               	movf	lcd_print_char@upper_nibble,w
  1380  0521  00F1               	movwf	??_lcd_print_char
  1381  0522  3004               	movlw	4
  1382  0523                     u525:
  1383  0523  1003               	clrc
  1384  0524  0CF1               	rrf	??_lcd_print_char,f
  1385  0525  3EFF               	addlw	-1
  1386  0526  1D03               	skipz
  1387  0527  2D23               	goto	u525
  1388  0528  0871               	movf	??_lcd_print_char,w
  1389  0529  120A  118A  2424  120A  118A  	fcall	_lcd_setbit
  1390  052E                     l1006:
  1391                           
  1392                           ;security lock.c: 216:      j++;
  1393  052E  1283               	bcf	3,5	;RP0=0, select bank0
  1394  052F  1303               	bcf	3,6	;RP1=0, select bank0
  1395  0530  1588               	bsf	8,3	;volatile
  1396  0531                     l1008:
  1397                           
  1398                           ;security lock.c: 217:     } else if (j >= 1 && input[j] == 11) {
  1399  0531  3033               	movlw	51
  1400  0532  00F5               	movwf	lcd_print_char@i
  1401  0533  3082               	movlw	130
  1402  0534  00F6               	movwf	lcd_print_char@i+1
  1403  0535                     l127:
  1404  0535  0000               	nop
  1405  0536                     l1014:
  1406  0536  30FF               	movlw	255
  1407  0537  07F5               	addwf	lcd_print_char@i,f
  1408  0538  1803               	skipnc
  1409  0539  0AF6               	incf	lcd_print_char@i+1,f
  1410  053A  30FF               	movlw	255
  1411  053B  07F6               	addwf	lcd_print_char@i+1,f
  1412  053C                     l1016:
  1413  053C  0876               	movf	lcd_print_char@i+1,w
  1414  053D  3A80               	xorlw	128
  1415  053E  00FF               	movwf	btemp+1
  1416  053F  3080               	movlw	128
  1417  0540  027F               	subwf	btemp+1,w
  1418  0541  1D03               	skipz
  1419  0542  2D45               	goto	u535
  1420  0543  3001               	movlw	1
  1421  0544  0275               	subwf	lcd_print_char@i,w
  1422  0545                     u535:
  1423  0545  1C03               	skipc
  1424  0546  2D48               	goto	u531
  1425  0547  2D49               	goto	u530
  1426  0548                     u531:
  1427  0548  2D35               	goto	l127
  1428  0549                     u530:
  1429  0549                     l128:
  1430                           
  1431                           ;security lock.c: 218:      y--;
  1432  0549  1283               	bcf	3,5	;RP0=0, select bank0
  1433  054A  1303               	bcf	3,6	;RP1=0, select bank0
  1434  054B  1188               	bcf	8,3	;volatile
  1435  054C                     l1018:
  1436                           
  1437                           ;security lock.c: 219: 
  1438  054C  0872               	movf	lcd_print_char@lower_nibble,w
  1439  054D  120A  118A  2424  120A  118A  	fcall	_lcd_setbit
  1440  0552                     l1020:
  1441                           
  1442                           ;security lock.c: 220:      lcd_set_cursor(2, y);
  1443  0552  1283               	bcf	3,5	;RP0=0, select bank0
  1444  0553  1303               	bcf	3,6	;RP1=0, select bank0
  1445  0554  1588               	bsf	8,3	;volatile
  1446  0555                     l1022:
  1447                           
  1448                           ;security lock.c: 221:      lcd_print_string(" ");
  1449  0555  3033               	movlw	51
  1450  0556  00F7               	movwf	lcd_print_char@i_73
  1451  0557  3082               	movlw	130
  1452  0558  00F8               	movwf	lcd_print_char@i_73+1
  1453  0559                     l129:
  1454  0559  0000               	nop
  1455  055A                     l1028:
  1456  055A  30FF               	movlw	255
  1457  055B  07F7               	addwf	lcd_print_char@i_73,f
  1458  055C  1803               	skipnc
  1459  055D  0AF8               	incf	lcd_print_char@i_73+1,f
  1460  055E  30FF               	movlw	255
  1461  055F  07F8               	addwf	lcd_print_char@i_73+1,f
  1462  0560                     l1030:
  1463  0560  0878               	movf	lcd_print_char@i_73+1,w
  1464  0561  3A80               	xorlw	128
  1465  0562  00FF               	movwf	btemp+1
  1466  0563  3080               	movlw	128
  1467  0564  027F               	subwf	btemp+1,w
  1468  0565  1D03               	skipz
  1469  0566  2D69               	goto	u545
  1470  0567  3001               	movlw	1
  1471  0568  0277               	subwf	lcd_print_char@i_73,w
  1472  0569                     u545:
  1473  0569  1C03               	skipc
  1474  056A  2D6C               	goto	u541
  1475  056B  2D6D               	goto	u540
  1476  056C                     u541:
  1477  056C  2D59               	goto	l129
  1478  056D                     u540:
  1479  056D                     l130:
  1480                           
  1481                           ;security lock.c: 222: 
  1482  056D  1283               	bcf	3,5	;RP0=0, select bank0
  1483  056E  1303               	bcf	3,6	;RP1=0, select bank0
  1484  056F  1188               	bcf	8,3	;volatile
  1485  0570                     l131:
  1486  0570  0008               	return
  1487  0571                     __end_of_lcd_print_char:
  1488                           
  1489                           	psect	text5
  1490  03EA                     __ptext5:	
  1491 ;; *************** function _lcd_clear *****************
  1492 ;; Defined at:
  1493 ;;		line 165 in file "security lock.c"
  1494 ;; Parameters:    Size  Location     Type
  1495 ;;		None
  1496 ;; Auto vars:     Size  Location     Type
  1497 ;;		None
  1498 ;; Return value:  Size  Location     Type
  1499 ;;                  1    wreg      void 
  1500 ;; Registers used:
  1501 ;;		wreg, status,2, status,0, pclath, cstack
  1502 ;; Tracked objects:
  1503 ;;		On entry : 0/0
  1504 ;;		On exit  : 0/0
  1505 ;;		Unchanged: 0/0
  1506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1507 ;;      Params:         0       0       0       0       0
  1508 ;;      Locals:         0       0       0       0       0
  1509 ;;      Temps:          0       0       0       0       0
  1510 ;;      Totals:         0       0       0       0       0
  1511 ;;Total ram usage:        0 bytes
  1512 ;; Hardware stack levels used:    1
  1513 ;; Hardware stack levels required when called:    2
  1514 ;; This function calls:
  1515 ;;		_lcd_cmd
  1516 ;; This function is called by:
  1517 ;;		_main
  1518 ;; This function uses a non-reentrant model
  1519 ;;
  1520                           
  1521                           
  1522                           ;psect for function _lcd_clear
  1523  03EA                     _lcd_clear:
  1524  03EA                     l1056:	
  1525                           ;incstack = 0
  1526                           ; Regs used in _lcd_clear: [wreg+status,2+status,0+pclath+cstack]
  1527                           
  1528                           
  1529                           ;security lock.c: 167:  lcd_cmd(0x06);
  1530  03EA  3000               	movlw	0
  1531  03EB  120A  118A  240A  120A  118A  	fcall	_lcd_cmd
  1532                           
  1533                           ;security lock.c: 168: }
  1534  03F0  3001               	movlw	1
  1535  03F1  120A  118A  240A  120A  118A  	fcall	_lcd_cmd
  1536  03F6                     l113:
  1537  03F6  0008               	return
  1538  03F7                     __end_of_lcd_clear:
  1539                           
  1540                           	psect	text6
  1541  040A                     __ptext6:	
  1542 ;; *************** function _lcd_cmd *****************
  1543 ;; Defined at:
  1544 ;;		line 156 in file "security lock.c"
  1545 ;; Parameters:    Size  Location     Type
  1546 ;;  a               1    wreg     unsigned char 
  1547 ;; Auto vars:     Size  Location     Type
  1548 ;;  a               1    3[COMMON] unsigned char 
  1549 ;; Return value:  Size  Location     Type
  1550 ;;                  1    wreg      void 
  1551 ;; Registers used:
  1552 ;;		wreg, status,2, status,0, pclath, cstack
  1553 ;; Tracked objects:
  1554 ;;		On entry : 0/0
  1555 ;;		On exit  : 0/0
  1556 ;;		Unchanged: 0/0
  1557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1558 ;;      Params:         0       0       0       0       0
  1559 ;;      Locals:         1       0       0       0       0
  1560 ;;      Temps:          2       0       0       0       0
  1561 ;;      Totals:         3       0       0       0       0
  1562 ;;Total ram usage:        3 bytes
  1563 ;; Hardware stack levels used:    1
  1564 ;; Hardware stack levels required when called:    1
  1565 ;; This function calls:
  1566 ;;		_lcd_setbit
  1567 ;; This function is called by:
  1568 ;;		_lcd_clear
  1569 ;;		_lcd_set_cursor
  1570 ;;		_lcd_start
  1571 ;; This function uses a non-reentrant model
  1572 ;;
  1573                           
  1574                           
  1575                           ;psect for function _lcd_cmd
  1576  040A                     _lcd_cmd:
  1577                           
  1578                           ;incstack = 0
  1579                           ; Regs used in _lcd_cmd: [wreg+status,2+status,0+pclath+cstack]
  1580                           ;lcd_cmd@a stored from wreg
  1581  040A  00F3               	movwf	lcd_cmd@a
  1582  040B                     l990:
  1583                           
  1584                           ;security lock.c: 156:  lcd_cmd(0x03);;security lock.c: 157:  _delay((unsigned long)((5)
      +                          *(20000000/4000.0)));;security lock.c: 158:  lcd_cmd(0x03);
  1585  040B  1283               	bcf	3,5	;RP0=0, select bank0
  1586  040C  1303               	bcf	3,6	;RP1=0, select bank0
  1587  040D  1108               	bcf	8,2	;volatile
  1588  040E                     l992:
  1589                           
  1590                           ;security lock.c: 159:  _delay((unsigned long)((11)*(20000000/4000.0)));
  1591  040E  0873               	movf	lcd_cmd@a,w
  1592  040F  120A  118A  2424  120A  118A  	fcall	_lcd_setbit
  1593  0414                     l994:
  1594                           
  1595                           ;security lock.c: 160:  lcd_cmd(0x03);
  1596  0414  1283               	bcf	3,5	;RP0=0, select bank0
  1597  0415  1303               	bcf	3,6	;RP1=0, select bank0
  1598  0416  1588               	bsf	8,3	;volatile
  1599  0417                     l996:
  1600                           
  1601                           ;security lock.c: 161:  lcd_cmd(0x02);
  1602  0417  301A               	movlw	26
  1603  0418  00F2               	movwf	??_lcd_cmd+1
  1604  0419  30F8               	movlw	248
  1605  041A  00F1               	movwf	??_lcd_cmd
  1606  041B                     u997:
  1607  041B  0BF1               	decfsz	??_lcd_cmd,f
  1608  041C  2C1B               	goto	u997
  1609  041D  0BF2               	decfsz	??_lcd_cmd+1,f
  1610  041E  2C1B               	goto	u997
  1611  041F  0000               	nop
  1612  0420                     l998:
  1613                           
  1614                           ;security lock.c: 162:  lcd_cmd(0x02);
  1615  0420  1283               	bcf	3,5	;RP0=0, select bank0
  1616  0421  1303               	bcf	3,6	;RP1=0, select bank0
  1617  0422  1188               	bcf	8,3	;volatile
  1618  0423                     l110:
  1619  0423  0008               	return
  1620  0424                     __end_of_lcd_cmd:
  1621                           
  1622                           	psect	text7
  1623  0424                     __ptext7:	
  1624 ;; *************** function _lcd_setbit *****************
  1625 ;; Defined at:
  1626 ;;		line 136 in file "security lock.c"
  1627 ;; Parameters:    Size  Location     Type
  1628 ;;  data_bit        1    wreg     unsigned char 
  1629 ;; Auto vars:     Size  Location     Type
  1630 ;;  data_bit        1    0[COMMON] unsigned char 
  1631 ;; Return value:  Size  Location     Type
  1632 ;;                  1    wreg      void 
  1633 ;; Registers used:
  1634 ;;		wreg
  1635 ;; Tracked objects:
  1636 ;;		On entry : 0/0
  1637 ;;		On exit  : 0/0
  1638 ;;		Unchanged: 0/0
  1639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1640 ;;      Params:         0       0       0       0       0
  1641 ;;      Locals:         1       0       0       0       0
  1642 ;;      Temps:          0       0       0       0       0
  1643 ;;      Totals:         1       0       0       0       0
  1644 ;;Total ram usage:        1 bytes
  1645 ;; Hardware stack levels used:    1
  1646 ;; This function calls:
  1647 ;;		Nothing
  1648 ;; This function is called by:
  1649 ;;		_lcd_cmd
  1650 ;;		_lcd_start
  1651 ;;		_lcd_print_char
  1652 ;; This function uses a non-reentrant model
  1653 ;;
  1654                           
  1655                           
  1656                           ;psect for function _lcd_setbit
  1657  0424                     _lcd_setbit:
  1658                           
  1659                           ;incstack = 0
  1660                           ; Regs used in _lcd_setbit: [wreg]
  1661                           ;lcd_setbit@data_bit stored from wreg
  1662  0424  00F0               	movwf	lcd_setbit@data_bit
  1663  0425                     l980:
  1664                           
  1665                           ;security lock.c: 136:   temp = 0x80 + b - 1;;security lock.c: 137:   z = temp >> 4;;sec
      +                          urity lock.c: 138:   y = temp & 0x0F;
  1666  0425  1C70               	btfss	lcd_setbit@data_bit,0
  1667  0426  2C28               	goto	u481
  1668  0427  2C29               	goto	u480
  1669  0428                     u481:
  1670  0428  2C2D               	goto	l99
  1671  0429                     u480:
  1672  0429                     l982:
  1673                           
  1674                           ;security lock.c: 139:   lcd_cmd(z);
  1675  0429  1283               	bcf	3,5	;RP0=0, select bank0
  1676  042A  1303               	bcf	3,6	;RP1=0, select bank0
  1677  042B  1608               	bsf	8,4	;volatile
  1678  042C  2C30               	goto	l100
  1679  042D                     l99:	
  1680                           ;security lock.c: 140:   lcd_cmd(y);
  1681                           
  1682                           
  1683                           ;security lock.c: 141:  } else if (a == 2) {
  1684  042D  1283               	bcf	3,5	;RP0=0, select bank0
  1685  042E  1303               	bcf	3,6	;RP1=0, select bank0
  1686  042F  1208               	bcf	8,4	;volatile
  1687  0430                     l100:
  1688                           
  1689                           ;security lock.c: 142:   temp = 0xC0 + b - 1;
  1690  0430  1CF0               	btfss	lcd_setbit@data_bit,1
  1691  0431  2C33               	goto	u491
  1692  0432  2C34               	goto	u490
  1693  0433                     u491:
  1694  0433  2C36               	goto	l101
  1695  0434                     u490:
  1696  0434                     l984:
  1697                           
  1698                           ;security lock.c: 143:   z = temp >> 4;
  1699  0434  1688               	bsf	8,5	;volatile
  1700  0435  2C37               	goto	l102
  1701  0436                     l101:	
  1702                           ;security lock.c: 144:   y = temp & 0x0F;
  1703                           
  1704                           
  1705                           ;security lock.c: 145:   lcd_cmd(z);
  1706  0436  1288               	bcf	8,5	;volatile
  1707  0437                     l102:
  1708                           
  1709                           ;security lock.c: 146:   lcd_cmd(y);
  1710  0437  1D70               	btfss	lcd_setbit@data_bit,2
  1711  0438  2C3A               	goto	u501
  1712  0439  2C3B               	goto	u500
  1713  043A                     u501:
  1714  043A  2C3D               	goto	l103
  1715  043B                     u500:
  1716  043B                     l986:
  1717                           
  1718                           ;security lock.c: 147:  }
  1719  043B  1708               	bsf	8,6	;volatile
  1720  043C  2C3E               	goto	l104
  1721  043D                     l103:	
  1722                           ;security lock.c: 148: }
  1723                           
  1724                           
  1725                           ;security lock.c: 149: 
  1726  043D  1308               	bcf	8,6	;volatile
  1727  043E                     l104:
  1728                           
  1729                           ;security lock.c: 150: void lcd_start()
  1730  043E  1DF0               	btfss	lcd_setbit@data_bit,3
  1731  043F  2C41               	goto	u511
  1732  0440  2C42               	goto	u510
  1733  0441                     u511:
  1734  0441  2C44               	goto	l105
  1735  0442                     u510:
  1736  0442                     l988:
  1737                           
  1738                           ;security lock.c: 151: {
  1739  0442  1788               	bsf	8,7	;volatile
  1740  0443  2C45               	goto	l107
  1741  0444                     l105:	
  1742                           ;security lock.c: 152:  lcd_setbit(0x00);
  1743                           
  1744                           
  1745                           ;security lock.c: 153: 
  1746  0444  1388               	bcf	8,7	;volatile
  1747  0445                     l107:
  1748  0445  0008               	return
  1749  0446                     __end_of_lcd_setbit:
  1750                           
  1751                           	psect	text8
  1752  0571                     __ptext8:	
  1753 ;; *************** function _get_colm *****************
  1754 ;; Defined at:
  1755 ;;		line 50 in file "security lock.c"
  1756 ;; Parameters:    Size  Location     Type
  1757 ;;  i               2    0[COMMON] int 
  1758 ;; Auto vars:     Size  Location     Type
  1759 ;;		None
  1760 ;; Return value:  Size  Location     Type
  1761 ;;                  1    wreg      void 
  1762 ;; Registers used:
  1763 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1764 ;; Tracked objects:
  1765 ;;		On entry : 0/0
  1766 ;;		On exit  : 0/0
  1767 ;;		Unchanged: 0/0
  1768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1769 ;;      Params:         2       0       0       0       0
  1770 ;;      Locals:         0       0       0       0       0
  1771 ;;      Temps:          1       0       0       0       0
  1772 ;;      Totals:         3       0       0       0       0
  1773 ;;Total ram usage:        3 bytes
  1774 ;; Hardware stack levels used:    1
  1775 ;; This function calls:
  1776 ;;		Nothing
  1777 ;; This function is called by:
  1778 ;;		_main
  1779 ;; This function uses a non-reentrant model
  1780 ;;
  1781                           
  1782                           
  1783                           ;psect for function _get_colm
  1784  0571                     _get_colm:
  1785  0571                     l45:	
  1786                           ;incstack = 0
  1787                           ; Regs used in _get_colm: [wreg-fsr0h+status,2+status,0]
  1788                           ;security lock.c: 50:    while (RC2 == 1) {;security lock.c: 51:    };security lock.c: 5
      +                          2:    break;
  1789                           
  1790                           
  1791                           ;security lock.c: 53:   }
  1792  0571  1283               	bcf	3,5	;RP0=0, select bank0
  1793  0572  1303               	bcf	3,6	;RP1=0, select bank0
  1794  0573  1607               	bsf	7,4	;volatile
  1795                           
  1796                           ;security lock.c: 54:   RC6 = 1;
  1797  0574  1387               	bcf	7,7	;volatile
  1798  0575  1307               	bcf	7,6	;volatile
  1799  0576  1287               	bcf	7,5	;volatile
  1800                           
  1801                           ;security lock.c: 55:   RC5 = 0;
  1802  0577  1C07               	btfss	7,0	;volatile
  1803  0578  2D7A               	goto	u551
  1804  0579  2D7B               	goto	u550
  1805  057A                     u551:
  1806  057A  2D8B               	goto	l46
  1807  057B                     u550:
  1808  057B                     l1032:
  1809                           
  1810                           ;security lock.c: 56:   if (RC0 == 1) {
  1811  057B  0870               	movf	get_colm@i,w
  1812  057C  00F2               	movwf	??_get_colm
  1813  057D  0772               	addwf	??_get_colm,w
  1814  057E  3E20               	addlw	(low (_input| 0))& (0+255)
  1815  057F  0084               	movwf	4
  1816  0580  3001               	movlw	1
  1817  0581  1383               	bcf	3,7	;select IRP bank0
  1818  0582  0080               	movwf	0
  1819  0583  0A84               	incf	4,f
  1820  0584  3000               	movlw	0
  1821  0585  0080               	movwf	0
  1822  0586                     l47:	
  1823                           ;security lock.c: 58:    while (RC0 == 1) {
  1824                           
  1825                           
  1826                           ;security lock.c: 57:    input[i] = 7;
  1827  0586  1807               	btfsc	7,0	;volatile
  1828  0587  2D89               	goto	u561
  1829  0588  2D8A               	goto	u560
  1830  0589                     u561:
  1831  0589  2D86               	goto	l47
  1832  058A                     u560:
  1833  058A  2E6A               	goto	l96
  1834  058B                     l46:	
  1835                           ;security lock.c: 60:    break;
  1836                           
  1837                           
  1838                           ;security lock.c: 61:   }
  1839  058B  1C87               	btfss	7,1	;volatile
  1840  058C  2D8E               	goto	u571
  1841  058D  2D8F               	goto	u570
  1842  058E                     u571:
  1843  058E  2D9F               	goto	l51
  1844  058F                     u570:
  1845  058F                     l1034:
  1846                           
  1847                           ;security lock.c: 62:   if (RC1 == 1) {
  1848  058F  0870               	movf	get_colm@i,w
  1849  0590  00F2               	movwf	??_get_colm
  1850  0591  0772               	addwf	??_get_colm,w
  1851  0592  3E20               	addlw	(low (_input| 0))& (0+255)
  1852  0593  0084               	movwf	4
  1853  0594  3002               	movlw	2
  1854  0595  1383               	bcf	3,7	;select IRP bank0
  1855  0596  0080               	movwf	0
  1856  0597  0A84               	incf	4,f
  1857  0598  3000               	movlw	0
  1858  0599  0080               	movwf	0
  1859  059A                     l52:	
  1860                           ;security lock.c: 64:    while (RC1 == 1) {
  1861                           
  1862                           
  1863                           ;security lock.c: 63:    input[i] = 8;
  1864  059A  1887               	btfsc	7,1	;volatile
  1865  059B  2D9D               	goto	u581
  1866  059C  2D9E               	goto	u580
  1867  059D                     u581:
  1868  059D  2D9A               	goto	l52
  1869  059E                     u580:
  1870  059E  2E6A               	goto	l96
  1871  059F                     l51:	
  1872                           ;security lock.c: 66:    break;
  1873                           
  1874                           
  1875                           ;security lock.c: 67:   }
  1876  059F  1D07               	btfss	7,2	;volatile
  1877  05A0  2DA2               	goto	u591
  1878  05A1  2DA3               	goto	u590
  1879  05A2                     u591:
  1880  05A2  2DB3               	goto	l55
  1881  05A3                     u590:
  1882  05A3                     l1036:
  1883                           
  1884                           ;security lock.c: 68:   if (RC2 == 1) {
  1885  05A3  0870               	movf	get_colm@i,w
  1886  05A4  00F2               	movwf	??_get_colm
  1887  05A5  0772               	addwf	??_get_colm,w
  1888  05A6  3E20               	addlw	(low (_input| 0))& (0+255)
  1889  05A7  0084               	movwf	4
  1890  05A8  3003               	movlw	3
  1891  05A9  1383               	bcf	3,7	;select IRP bank0
  1892  05AA  0080               	movwf	0
  1893  05AB  0A84               	incf	4,f
  1894  05AC  3000               	movlw	0
  1895  05AD  0080               	movwf	0
  1896  05AE                     l56:	
  1897                           ;security lock.c: 70:    while (RC2 == 1) {
  1898                           
  1899                           
  1900                           ;security lock.c: 69:    input[i] = 9;
  1901  05AE  1907               	btfsc	7,2	;volatile
  1902  05AF  2DB1               	goto	u601
  1903  05B0  2DB2               	goto	u600
  1904  05B1                     u601:
  1905  05B1  2DAE               	goto	l56
  1906  05B2                     u600:
  1907  05B2  2E6A               	goto	l96
  1908  05B3                     l55:	
  1909                           ;security lock.c: 72:    break;
  1910                           
  1911                           
  1912                           ;security lock.c: 73:   }
  1913  05B3  1687               	bsf	7,5	;volatile
  1914                           
  1915                           ;security lock.c: 74:   RC7 = 1;
  1916  05B4  1207               	bcf	7,4	;volatile
  1917                           
  1918                           ;security lock.c: 75:   RC6 = 0;
  1919  05B5  1C07               	btfss	7,0	;volatile
  1920  05B6  2DB8               	goto	u611
  1921  05B7  2DB9               	goto	u610
  1922  05B8                     u611:
  1923  05B8  2DC9               	goto	l59
  1924  05B9                     u610:
  1925  05B9                     l1038:
  1926                           
  1927                           ;security lock.c: 76:   if (RC0 == 1) {
  1928  05B9  0870               	movf	get_colm@i,w
  1929  05BA  00F2               	movwf	??_get_colm
  1930  05BB  0772               	addwf	??_get_colm,w
  1931  05BC  3E20               	addlw	(low (_input| 0))& (0+255)
  1932  05BD  0084               	movwf	4
  1933  05BE  3004               	movlw	4
  1934  05BF  1383               	bcf	3,7	;select IRP bank0
  1935  05C0  0080               	movwf	0
  1936  05C1  0A84               	incf	4,f
  1937  05C2  3000               	movlw	0
  1938  05C3  0080               	movwf	0
  1939  05C4                     l60:	
  1940                           ;security lock.c: 78:    while (RC0 == 1) {
  1941                           
  1942                           
  1943                           ;security lock.c: 77:    input[i] = 11;
  1944  05C4  1807               	btfsc	7,0	;volatile
  1945  05C5  2DC7               	goto	u621
  1946  05C6  2DC8               	goto	u620
  1947  05C7                     u621:
  1948  05C7  2DC4               	goto	l60
  1949  05C8                     u620:
  1950  05C8  2E6A               	goto	l96
  1951  05C9                     l59:	
  1952                           ;security lock.c: 80:    break;
  1953                           
  1954                           
  1955                           ;security lock.c: 81:   }
  1956  05C9  1C87               	btfss	7,1	;volatile
  1957  05CA  2DCC               	goto	u631
  1958  05CB  2DCD               	goto	u630
  1959  05CC                     u631:
  1960  05CC  2DDD               	goto	l63
  1961  05CD                     u630:
  1962  05CD                     l1040:
  1963                           
  1964                           ;security lock.c: 82:   if (RC1 == 1) {
  1965  05CD  0870               	movf	get_colm@i,w
  1966  05CE  00F2               	movwf	??_get_colm
  1967  05CF  0772               	addwf	??_get_colm,w
  1968  05D0  3E20               	addlw	(low (_input| 0))& (0+255)
  1969  05D1  0084               	movwf	4
  1970  05D2  3005               	movlw	5
  1971  05D3  1383               	bcf	3,7	;select IRP bank0
  1972  05D4  0080               	movwf	0
  1973  05D5  0A84               	incf	4,f
  1974  05D6  3000               	movlw	0
  1975  05D7  0080               	movwf	0
  1976  05D8                     l64:	
  1977                           ;security lock.c: 84:    while (RC1 == 1) {
  1978                           
  1979                           
  1980                           ;security lock.c: 83:    input[i] = 0;
  1981  05D8  1887               	btfsc	7,1	;volatile
  1982  05D9  2DDB               	goto	u641
  1983  05DA  2DDC               	goto	u640
  1984  05DB                     u641:
  1985  05DB  2DD8               	goto	l64
  1986  05DC                     u640:
  1987  05DC  2E6A               	goto	l96
  1988  05DD                     l63:	
  1989                           ;security lock.c: 86:    break;
  1990                           
  1991                           
  1992                           ;security lock.c: 87:   }
  1993  05DD  1D07               	btfss	7,2	;volatile
  1994  05DE  2DE0               	goto	u651
  1995  05DF  2DE1               	goto	u650
  1996  05E0                     u651:
  1997  05E0  2DF1               	goto	l67
  1998  05E1                     u650:
  1999  05E1                     l1042:
  2000                           
  2001                           ;security lock.c: 88:   if (RC2 == 1) {
  2002  05E1  0870               	movf	get_colm@i,w
  2003  05E2  00F2               	movwf	??_get_colm
  2004  05E3  0772               	addwf	??_get_colm,w
  2005  05E4  3E20               	addlw	(low (_input| 0))& (0+255)
  2006  05E5  0084               	movwf	4
  2007  05E6  3006               	movlw	6
  2008  05E7  1383               	bcf	3,7	;select IRP bank0
  2009  05E8  0080               	movwf	0
  2010  05E9  0A84               	incf	4,f
  2011  05EA  3000               	movlw	0
  2012  05EB  0080               	movwf	0
  2013  05EC                     l68:	
  2014                           ;security lock.c: 90:    while (RC2 == 1) {
  2015                           
  2016                           
  2017                           ;security lock.c: 89:    input[i] = 12;
  2018  05EC  1907               	btfsc	7,2	;volatile
  2019  05ED  2DEF               	goto	u661
  2020  05EE  2DF0               	goto	u660
  2021  05EF                     u661:
  2022  05EF  2DEC               	goto	l68
  2023  05F0                     u660:
  2024  05F0  2E6A               	goto	l96
  2025  05F1                     l67:	
  2026                           ;security lock.c: 92:    break;
  2027                           
  2028                           
  2029                           ;security lock.c: 93:   }
  2030  05F1  1707               	bsf	7,6	;volatile
  2031                           
  2032                           ;security lock.c: 94:  }
  2033  05F2  1287               	bcf	7,5	;volatile
  2034                           
  2035                           ;security lock.c: 95: }
  2036  05F3  1C07               	btfss	7,0	;volatile
  2037  05F4  2DF6               	goto	u671
  2038  05F5  2DF7               	goto	u670
  2039  05F6                     u671:
  2040  05F6  2E07               	goto	l71
  2041  05F7                     u670:
  2042  05F7                     l1044:
  2043                           
  2044                           ;security lock.c: 96: 
  2045  05F7  0870               	movf	get_colm@i,w
  2046  05F8  00F2               	movwf	??_get_colm
  2047  05F9  0772               	addwf	??_get_colm,w
  2048  05FA  3E20               	addlw	(low (_input| 0))& (0+255)
  2049  05FB  0084               	movwf	4
  2050  05FC  3007               	movlw	7
  2051  05FD  1383               	bcf	3,7	;select IRP bank0
  2052  05FE  0080               	movwf	0
  2053  05FF  0A84               	incf	4,f
  2054  0600  3000               	movlw	0
  2055  0601  0080               	movwf	0
  2056  0602                     l72:	
  2057                           ;security lock.c: 98: {
  2058                           
  2059                           
  2060                           ;security lock.c: 97: void lcd_setbit(char data_bit)
  2061  0602  1807               	btfsc	7,0	;volatile
  2062  0603  2E05               	goto	u681
  2063  0604  2E06               	goto	u680
  2064  0605                     u681:
  2065  0605  2E02               	goto	l72
  2066  0606                     u680:
  2067  0606  2E6A               	goto	l96
  2068  0607                     l71:	
  2069                           ;security lock.c: 100:   RD4 = 1;
  2070                           
  2071                           
  2072                           ;security lock.c: 101:  else
  2073  0607  1C87               	btfss	7,1	;volatile
  2074  0608  2E0A               	goto	u691
  2075  0609  2E0B               	goto	u690
  2076  060A                     u691:
  2077  060A  2E1B               	goto	l75
  2078  060B                     u690:
  2079  060B                     l1046:
  2080                           
  2081                           ;security lock.c: 102:   RD4 = 0;
  2082  060B  0870               	movf	get_colm@i,w
  2083  060C  00F2               	movwf	??_get_colm
  2084  060D  0772               	addwf	??_get_colm,w
  2085  060E  3E20               	addlw	(low (_input| 0))& (0+255)
  2086  060F  0084               	movwf	4
  2087  0610  3008               	movlw	8
  2088  0611  1383               	bcf	3,7	;select IRP bank0
  2089  0612  0080               	movwf	0
  2090  0613  0A84               	incf	4,f
  2091  0614  3000               	movlw	0
  2092  0615  0080               	movwf	0
  2093  0616                     l76:	
  2094                           ;security lock.c: 104:   RD5 = 1;
  2095                           
  2096                           
  2097                           ;security lock.c: 103:  if (data_bit & 2)
  2098  0616  1887               	btfsc	7,1	;volatile
  2099  0617  2E19               	goto	u701
  2100  0618  2E1A               	goto	u700
  2101  0619                     u701:
  2102  0619  2E16               	goto	l76
  2103  061A                     u700:
  2104  061A  2E6A               	goto	l96
  2105  061B                     l75:	
  2106                           ;security lock.c: 106:   RD5 = 0;
  2107                           
  2108                           
  2109                           ;security lock.c: 107:  if (data_bit & 4)
  2110  061B  1D07               	btfss	7,2	;volatile
  2111  061C  2E1E               	goto	u711
  2112  061D  2E1F               	goto	u710
  2113  061E                     u711:
  2114  061E  2E2F               	goto	l79
  2115  061F                     u710:
  2116  061F                     l1048:
  2117                           
  2118                           ;security lock.c: 108:   RD6 = 1;
  2119  061F  0870               	movf	get_colm@i,w
  2120  0620  00F2               	movwf	??_get_colm
  2121  0621  0772               	addwf	??_get_colm,w
  2122  0622  3E20               	addlw	(low (_input| 0))& (0+255)
  2123  0623  0084               	movwf	4
  2124  0624  3009               	movlw	9
  2125  0625  1383               	bcf	3,7	;select IRP bank0
  2126  0626  0080               	movwf	0
  2127  0627  0A84               	incf	4,f
  2128  0628  3000               	movlw	0
  2129  0629  0080               	movwf	0
  2130  062A                     l80:	
  2131                           ;security lock.c: 110:   RD6 = 0;
  2132                           
  2133                           
  2134                           ;security lock.c: 109:  else
  2135  062A  1907               	btfsc	7,2	;volatile
  2136  062B  2E2D               	goto	u721
  2137  062C  2E2E               	goto	u720
  2138  062D                     u721:
  2139  062D  2E2A               	goto	l80
  2140  062E                     u720:
  2141  062E  2E6A               	goto	l96
  2142  062F                     l79:	
  2143                           ;security lock.c: 112:   RD7 = 1;
  2144                           
  2145                           
  2146                           ;security lock.c: 113:  else
  2147  062F  1787               	bsf	7,7	;volatile
  2148                           
  2149                           ;security lock.c: 114:   RD7 = 0;
  2150  0630  1307               	bcf	7,6	;volatile
  2151                           
  2152                           ;security lock.c: 115: }
  2153  0631  1C07               	btfss	7,0	;volatile
  2154  0632  2E34               	goto	u731
  2155  0633  2E35               	goto	u730
  2156  0634                     u731:
  2157  0634  2E45               	goto	l83
  2158  0635                     u730:
  2159  0635                     l1050:
  2160                           
  2161                           ;security lock.c: 116: 
  2162  0635  0870               	movf	get_colm@i,w
  2163  0636  00F2               	movwf	??_get_colm
  2164  0637  0772               	addwf	??_get_colm,w
  2165  0638  3E20               	addlw	(low (_input| 0))& (0+255)
  2166  0639  0084               	movwf	4
  2167  063A  300B               	movlw	11
  2168  063B  1383               	bcf	3,7	;select IRP bank0
  2169  063C  0080               	movwf	0
  2170  063D  0A84               	incf	4,f
  2171  063E  3000               	movlw	0
  2172  063F  0080               	movwf	0
  2173  0640                     l84:	
  2174                           ;security lock.c: 118: {
  2175                           
  2176                           
  2177                           ;security lock.c: 117: void lcd_cmd(char a)
  2178  0640  1807               	btfsc	7,0	;volatile
  2179  0641  2E43               	goto	u741
  2180  0642  2E44               	goto	u740
  2181  0643                     u741:
  2182  0643  2E40               	goto	l84
  2183  0644                     u740:
  2184  0644  2E6A               	goto	l96
  2185  0645                     l83:	
  2186                           ;security lock.c: 120:  lcd_setbit(a);
  2187                           
  2188                           
  2189                           ;security lock.c: 121:  RD3 = 1;
  2190  0645  1C87               	btfss	7,1	;volatile
  2191  0646  2E48               	goto	u751
  2192  0647  2E49               	goto	u750
  2193  0648                     u751:
  2194  0648  2E57               	goto	l87
  2195  0649                     u750:
  2196  0649                     l1052:
  2197                           
  2198                           ;security lock.c: 122:  _delay((unsigned long)((4)*(20000000/4000.0)));
  2199  0649  0870               	movf	get_colm@i,w
  2200  064A  00F2               	movwf	??_get_colm
  2201  064B  0772               	addwf	??_get_colm,w
  2202  064C  3E20               	addlw	(low (_input| 0))& (0+255)
  2203  064D  0084               	movwf	4
  2204  064E  1383               	bcf	3,7	;select IRP bank0
  2205  064F  0180               	clrf	0
  2206  0650  0A84               	incf	4,f
  2207  0651  0180               	clrf	0
  2208  0652                     l88:	
  2209                           ;security lock.c: 124: }
  2210                           
  2211                           
  2212                           ;security lock.c: 123:  RD3 = 0;
  2213  0652  1887               	btfsc	7,1	;volatile
  2214  0653  2E55               	goto	u761
  2215  0654  2E56               	goto	u760
  2216  0655                     u761:
  2217  0655  2E52               	goto	l88
  2218  0656                     u760:
  2219  0656  2E6A               	goto	l96
  2220  0657                     l87:	
  2221                           ;security lock.c: 126: void lcd_clear()
  2222                           
  2223                           
  2224                           ;security lock.c: 127: {
  2225  0657  1D07               	btfss	7,2	;volatile
  2226  0658  2E5A               	goto	u771
  2227  0659  2E5B               	goto	u770
  2228  065A                     u771:
  2229  065A  2D71               	goto	l45
  2230  065B                     u770:
  2231  065B                     l1054:
  2232                           
  2233                           ;security lock.c: 128:  lcd_cmd(0);
  2234  065B  0870               	movf	get_colm@i,w
  2235  065C  00F2               	movwf	??_get_colm
  2236  065D  0772               	addwf	??_get_colm,w
  2237  065E  3E20               	addlw	(low (_input| 0))& (0+255)
  2238  065F  0084               	movwf	4
  2239  0660  300C               	movlw	12
  2240  0661  1383               	bcf	3,7	;select IRP bank0
  2241  0662  0080               	movwf	0
  2242  0663  0A84               	incf	4,f
  2243  0664  3000               	movlw	0
  2244  0665  0080               	movwf	0
  2245  0666                     l92:	
  2246                           ;security lock.c: 130: }
  2247                           
  2248                           
  2249                           ;security lock.c: 129:  lcd_cmd(1);
  2250  0666  1907               	btfsc	7,2	;volatile
  2251  0667  2E69               	goto	u781
  2252  0668  2E6A               	goto	u780
  2253  0669                     u781:
  2254  0669  2E66               	goto	l92
  2255  066A                     u780:
  2256  066A                     l96:
  2257  066A  0008               	return
  2258  066B                     __end_of_get_colm:
  2259  007E                     btemp	set	126	;btemp
  2260  007E                     wtemp0	set	126
  2261                           
  2262                           	psect	config
  2263                           
  2264                           ;Config register CONFIG @ 0x2007
  2265                           ;	Oscillator Selection bits
  2266                           ;	FOSC = HS, HS oscillator
  2267                           ;	Watchdog Timer Enable bit
  2268                           ;	WDTE = OFF, WDT disabled
  2269                           ;	Power-up Timer Enable bit
  2270                           ;	PWRTE = ON, PWRT enabled
  2271                           ;	Brown-out Reset Enable bit
  2272                           ;	BOREN = ON, BOR enabled
  2273                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  2274                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  2275                           ;	Data EEPROM Memory Code Protection bit
  2276                           ;	CPD = OFF, Data EEPROM code protection off
  2277                           ;	Flash Program Memory Write Enable bits
  2278                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  2279                           ;	In-Circuit Debugger Mode bit
  2280                           ;	DEBUG = 0x1, unprogrammed default
  2281                           ;	Flash Program Memory Code Protection bit
  2282                           ;	CP = OFF, Code protection off
  2283  2007                     	org	8199
  2284  2007  3F72               	dw	16242

Data Sizes:
    Strings     37
    Constant    0
    Data        8
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80      7      25
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    lcd_print_string@a	PTR unsigned char  size(1) Largest target is 15
		 -> STR_5(CODE[10]), STR_4(CODE[8]), STR_3(CODE[2]), STR_2(CODE[2]), 
		 -> STR_1(CODE[15]), 


Critical Paths under _main in COMMON

    _main->_lcd_print_string
    _lcd_start->_lcd_cmd
    _lcd_set_cursor->_lcd_cmd
    _lcd_print_string->_lcd_print_char
    _lcd_print_char->_lcd_setbit
    _lcd_clear->_lcd_cmd
    _lcd_cmd->_lcd_setbit

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0    2283
                                              0 BANK0      7     7      0
                           _get_colm
                          _lcd_clear
                   _lcd_print_string
                     _lcd_set_cursor
                          _lcd_start
 ---------------------------------------------------------------------------------
 (1) _lcd_start                                            4     4      0     244
                                              4 COMMON     4     4      0
                            _lcd_cmd
                         _lcd_setbit
 ---------------------------------------------------------------------------------
 (1) _lcd_set_cursor                                       6     5      1     760
                                              4 COMMON     6     5      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_print_string                                     3     3      0     525
                                              9 COMMON     3     3      0
                     _lcd_print_char
 ---------------------------------------------------------------------------------
 (2) _lcd_print_char                                       8     8      0     270
                                              1 COMMON     8     8      0
                         _lcd_setbit
 ---------------------------------------------------------------------------------
 (1) _lcd_clear                                            0     0      0     110
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                         _lcd_setbit
 ---------------------------------------------------------------------------------
 (2) _lcd_setbit                                           1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _get_colm                                             3     1      2     416
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _get_colm
   _lcd_clear
     _lcd_cmd
       _lcd_setbit
   _lcd_print_string
     _lcd_print_char
       _lcd_setbit
   _lcd_set_cursor
     _lcd_cmd
       _lcd_setbit
   _lcd_start
     _lcd_cmd
       _lcd_setbit
     _lcd_setbit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      7      19       5       31.2%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       C       1       85.7%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      25      12        0.0%
ABS                  0      0      25       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Mon Jan 18 16:47:22 2021

                         pc 0002                          l51 059F                          l60 05C4  
                        l52 059A                          l45 0571                          l46 058B  
                        l71 0607                          l63 05DD                          l55 05B3  
                        l47 0586                          l80 062A                          l72 0602  
                        l64 05D8                          l56 05AE                          l83 0645  
                        l75 061B                          l67 05F1                          l59 05C9  
                        l92 0666                          l84 0640                          l76 0616  
                        l68 05EC                          l87 0657                          l79 062F  
                        l88 0652                          l96 066A                          l99 042D  
                        fsr 0004                         l100 0430                         l101 0436  
                       l102 0437                         l110 0423                         l103 043D  
                       l104 043E                         l105 0444                         l113 03F6  
                       l130 056D                         l107 0445                         l131 0570  
                       l124 0511                         l127 0535                         l119 04BC  
                       l128 0549                         l160 07E1                         l129 0559  
                       l137 046A                         l154 07DF                         l147 0744  
                       l148 073B                         l980 0425                         l982 0429  
                       l990 040B                         l984 0434                         l992 040E  
                       l986 043B                         l994 0414                         l988 0442  
                       l996 0417                         l998 0420                         _RC0 0038  
                       _RC1 0039                         _RC2 003A                         _RC4 003C  
                       _RD2 0042                         _RC5 003D                         _RD3 0043  
                       _RC6 003E                         _RD4 0044                         _RC7 003F  
                       _RD5 0045                         _RD6 0046                         _RD7 0047  
                       u500 043B                         u501 043A                         u510 0442  
                       u511 0441                         u600 05B2                         u601 05B1  
                       u610 05B9                         u530 0549                         u611 05B8  
                       u531 0548                         u700 061A                         u620 05C8  
                       u540 056D                         u701 0619                         u621 05C7  
                       u541 056C                         u525 0523                         u710 061F  
                       u630 05CD                         u550 057B                         u711 061E  
                       u631 05CC                         u551 057A                         u535 0545  
                       u720 062E                         u640 05DC                         u560 058A  
                       u480 0429                         u721 062D                         u641 05DB  
                       u561 0589                         u481 0428                         u545 0569  
                       u730 0635                         u650 05E1                         u570 058F  
                       u490 0434                         u810 049A                         u731 0634  
                       u651 05E0                         u571 058E                         u491 0433  
                       u811 0499                         u740 0644                         u660 05F0  
                       u580 059E                         u900 076A                         u741 0643  
                       u661 05EF                         u581 059D                         u805 0479  
                       u901 0769                         u750 0649                         u670 05F7  
                       u590 05A3                         u830 046A                         u910 0774  
                       u751 0648                         u671 05F6                         u591 05A2  
                       u831 0469                         u911 0773                         u760 0656  
                       u680 0606                         u920 077E                         u840 069F  
                       u761 0655                         u681 0605                         u825 04A2  
                       u921 077D                         u841 069E                         u770 065B  
                       u690 060B                         u930 0788                         u850 06C1  
                       u771 065A                         u691 060A                         u931 0787  
                       u915 0770                         u851 06C0                         u780 066A  
                       u940 0792                         u860 06D8                         u781 0669  
                       u941 0791                         u925 077A                         u861 06D7  
                       u845 069B                         u790 0471                         u870 0702  
                       u791 0470                         u935 0784                         u871 0701  
                       u880 0716                         u945 078E                         u881 0715  
                       u865 06D4                         u890 0757                         u891 0756  
                       u875 06FE                         u957 07B1                         u967 07D7  
                       u895 0753                         u977 04CD                         u987 04DC  
                       u997 041B                         fsr0 0004                         indf 0000  
           ?_lcd_set_cursor 0074                        l1000 0513                        l1002 051D  
                      l1020 0552                        l1004 0520                        l1100 04ED  
                      l1030 0560                        l1022 0555                        l1014 0536  
                      l1006 052E                        l1110 050B                        l1102 04F3  
                      l1040 05CD                        l1032 057B                        l1016 053C  
                      l1008 0531                        l1112 0447                        l1104 04F9  
                      l1200 07BD                        l1120 066B                        l1050 0635  
                      l1042 05E1                        l1034 058F                        l1018 054C  
                      l1114 044A                        l1106 04FF                        l1202 07C5  
                      l1130 067E                        l1122 066F                        l1052 0649  
                      l1044 05F7                        l1036 05A3                        l1028 055A  
                      l1116 0457                        l1060 0471                        l1108 0505  
                      l1204 07CB                        l1132 0686                        l1124 0671  
                      l1054 065B                        l1046 060B                        l1038 05B9  
                      l1118 045D                        l1070 049A                        l1062 0482  
                      l1206 07CF                        l1150 06D8                        l1134 068C  
                      l1126 0674                        l1048 061F                        l1056 03EA  
                      l1072 04AB                        l1064 0487                        l1080 04C3  
                      l1160 0716                        l1152 06E4                        l1144 06A5  
                      l1136 0690                        l1128 0679                        l1074 04B0  
                      l1066 048D                        l1058 046C                        l1090 04C3  
                      l1082 04C3                        l1170 073C                        l1162 071C  
                      l1154 06EA                        l1146 06B0                        l1138 069F  
                      l1076 04B6                        l1068 0494                        l1092 04C9  
                      l1180 0774                        l1172 074A                        l1164 0726  
                      l1148 06C1                        l1156 06F3                        l1094 04D2  
                      l1078 04BD                        l1190 079F                        l1182 077E  
                      l1166 072C                        l1158 0702                        l1174 0758  
                      l1096 04E1                        l1192 07A5                        l1184 0788  
                      l1176 0761                        l1168 0734                        l1098 04E7  
                      l1194 07A9                        l1186 0792                        l1178 076A  
                      l1188 0797                        l1198 07B8                        STR_1 0009  
                      STR_2 002C                        STR_3 002A                        STR_4 0022  
                      STR_5 0018                        _main 066B                        _pass 002A  
                      btemp 007E                        start 0000             ?_lcd_print_char 0070  
                     ?_main 0070                       _PORTB 0006                       _TRISB 0086  
                     _TRISC 0087                       _TRISD 0088             __end_of_lcd_cmd 0424  
                     _input 0020                       main@j 0037                       main@y 0035  
                     pclath 000A                       status 0003                       wtemp0 007E  
           __initialization 07E4                __end_of_main 07E4                      ??_main 0032  
          __end_of_get_colm 066B                   ??_lcd_cmd 0071     __end_of__initialization 07FC  
         ?_lcd_print_string 0070          ??_lcd_print_string 0079              __pcstackCOMMON 0070  
              __pidataBANK0 03E2            ??_lcd_set_cursor 0075          __size_of_lcd_clear 000D  
        __size_of_lcd_start 0055                  __pbssBANK0 0020            ??_lcd_print_char 0071  
         lcd_print_string@a 007B           lcd_print_string@i 0079                  __pmaintext 066B  
                _lcd_setbit 0424                   ?_get_colm 0070                  __stringtab 0003  
         __end_of_lcd_clear 03F7           __end_of_lcd_start 0512  lcd_print_char@lower_nibble 0072  
                   __ptext1 04BD                     __ptext2 046B                     __ptext3 0446  
                   __ptext4 0512                     __ptext5 03EA                     __ptext6 040A  
                   __ptext7 0424                     __ptext8 0571                     _lcd_cmd 040A  
                ??_get_colm 0072        end_of_initialization 07FC                 ?_lcd_setbit 0070  
        lcd_print_char@i_73 0077          lcd_print_char@data 0074   __size_of_lcd_print_string 0025  
       start_initialization 07E4                  init_fetch0 03F7         __size_of_lcd_setbit 0022  
               __pdataBANK0 002A                   ___latbits 0002               __pcstackBANK0 0032  
         __size_of_get_colm 00FA  lcd_print_char@upper_nibble 0073                   _lcd_clear 03EA  
                 __pstrings 0003                   _lcd_start 04BD                    ?_lcd_cmd 0070  
   __size_of_lcd_set_cursor 0052             lcd_set_cursor@a 0076             lcd_set_cursor@b 0074  
           lcd_set_cursor@y 0078             lcd_set_cursor@z 0077     __size_of_lcd_print_char 005F  
                ?_lcd_clear 0070            _lcd_print_string 0446                  ?_lcd_start 0070  
               __stringbase 0008                   get_colm@i 0070                ??_lcd_setbit 0070  
        lcd_setbit@data_bit 0070          __end_of_lcd_setbit 0446             lcd_print_char@i 0075  
        __end_of__stringtab 0009            __size_of_lcd_cmd 001A          lcd_set_cursor@temp 0079  
                  _get_colm 0571               __size_of_main 0179                    lcd_cmd@a 0073  
               ??_lcd_clear 0074                 ??_lcd_start 0074                    init_ram0 03FB  
            _lcd_set_cursor 046B                   stringcode 0003              _lcd_print_char 0512  
                  stringdir 0003                    stringtab 0003      __end_of_lcd_set_cursor 04BD  
  __end_of_lcd_print_string 046B      __end_of_lcd_print_char 0571  
